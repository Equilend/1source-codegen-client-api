/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.model.LedgerResponse;
import com.os.client.model.ModelReturn;
import com.os.client.model.ReturnAcknowledgement;
import com.os.client.model.ReturnProposal;
import com.os.client.model.Returns;
import com.os.client.model.ReturnsReturnIdBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ReturnsApi
 */
@Ignore
public class ReturnsApiTest {

    private final ReturnsApi api = new ReturnsApi();

    /**
     * Read collection of returns against contract specified by &#x27;contractId&#x27;
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdReturnsGetTest() throws Exception {
        String contractId = null;
        Returns response = api.ledgerContractsContractIdReturnsGet(contractId);

        // TODO: test validations
    }
    /**
     * Create a return
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdReturnsPostTest() throws Exception {
        ReturnProposal body = null;
        String contractId = null;
        api.ledgerContractsContractIdReturnsPost(body, contractId);

        // TODO: test validations
    }
    /**
     * Acknowledge a pending return. No change to status.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdReturnsReturnIdAcknowledgePostTest() throws Exception {
        ReturnAcknowledgement body = null;
        String contractId = null;
        String returnId = null;
        LedgerResponse response = api.ledgerContractsContractIdReturnsReturnIdAcknowledgePost(body, contractId, returnId);

        // TODO: test validations
    }
    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdReturnsReturnIdCancelPostTest() throws Exception {
        String contractId = null;
        String returnId = null;
        LedgerResponse response = api.ledgerContractsContractIdReturnsReturnIdCancelPost(contractId, returnId);

        // TODO: test validations
    }
    /**
     * Read a return
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdReturnsReturnIdGetTest() throws Exception {
        String contractId = null;
        String returnId = null;
        ModelReturn response = api.ledgerContractsContractIdReturnsReturnIdGet(contractId, returnId);

        // TODO: test validations
    }
    /**
     * Update unilateral fields on a return
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdReturnsReturnIdPatchTest() throws Exception {
        String contractId = null;
        String returnId = null;
        ReturnsReturnIdBody body = null;
        LedgerResponse response = api.ledgerContractsContractIdReturnsReturnIdPatch(contractId, returnId, body);

        // TODO: test validations
    }
    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdReturnsReturnIdVenuecancelPostTest() throws Exception {
        String contractId = null;
        String returnId = null;
        LedgerResponse response = api.ledgerContractsContractIdReturnsReturnIdVenuecancelPost(contractId, returnId);

        // TODO: test validations
    }
    /**
     * For delegated venues to create a return atomically.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdVenuereturnsPostTest() throws Exception {
        ReturnProposal body = null;
        String contractId = null;
        api.ledgerContractsContractIdVenuereturnsPost(body, contractId);

        // TODO: test validations
    }
    /**
     * Read collection of returns
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerReturnsGetTest() throws Exception {
        Returns response = api.ledgerReturnsGet();

        // TODO: test validations
    }
    /**
     * Read a return
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerReturnsReturnIdGetTest() throws Exception {
        String returnId = null;
        ModelReturn response = api.ledgerReturnsReturnIdGet(returnId);

        // TODO: test validations
    }
}
