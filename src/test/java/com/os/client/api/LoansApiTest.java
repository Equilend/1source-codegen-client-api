/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.2
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.model.EventType;
import com.os.client.model.LedgerResponse;
import com.os.client.model.Loan;
import com.os.client.model.LoanAmendment;
import com.os.client.model.LoanAmendmentProposal;
import com.os.client.model.LoanCancelErrorResponse;
import com.os.client.model.LoanCloseErrorResponse;
import com.os.client.model.LoanDeclineErrorResponse;
import com.os.client.model.LoanProposal;
import com.os.client.model.LoanProposalApproval;
import com.os.client.model.LoanSplit;
import com.os.client.model.LoanSplitLotAcknowledge;
import com.os.client.model.LoanSplitProposalLot;
import com.os.client.model.LoanStatus;
import com.os.client.model.Loans;
import com.os.client.model.LoansLoanIdBody;
import java.time.OffsetDateTime;
import com.os.client.model.Rates;
import com.os.client.model.SortOrder;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for LoansApi
 */
@Ignore
public class LoansApiTest {

    private final LoansApi api = new LoansApi();

    /**
     * Read a collection of loans. Defaults to return the last 100 loans updated.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansGetTest() throws Exception {
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer size = null;
        LoanStatus loanStatus = null;
        Loans response = api.ledgerLoansGet(since, before, size, loanStatus);

        // TODO: test validations
    }
    /**
     * Approve a loan amendment in \&quot;proposed\&quot; state.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdAmendLoanAmendmentIdApprovePostTest() throws Exception {
        String loanId = null;
        String loanAmendmentId = null;
        LedgerResponse response = api.ledgerLoansLoanIdAmendLoanAmendmentIdApprovePost(loanId, loanAmendmentId);

        // TODO: test validations
    }
    /**
     * Cancel a loan amendment in \&quot;proposed\&quot; state
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdAmendLoanAmendmentIdCancelPostTest() throws Exception {
        LoanCancelErrorResponse body = null;
        String loanId = null;
        String loanAmendmentId = null;
        LedgerResponse response = api.ledgerLoansLoanIdAmendLoanAmendmentIdCancelPost(body, loanId, loanAmendmentId);

        // TODO: test validations
    }
    /**
     * Decline a loan amendment in \&quot;proposed\&quot; state
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdAmendLoanAmendmentIdDeclinePostTest() throws Exception {
        LoanDeclineErrorResponse body = null;
        String loanId = null;
        String loanAmendmentId = null;
        LedgerResponse response = api.ledgerLoansLoanIdAmendLoanAmendmentIdDeclinePost(body, loanId, loanAmendmentId);

        // TODO: test validations
    }
    /**
     * Retrieve a loan amendment.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdAmendLoanAmendmentIdGetTest() throws Exception {
        String loanId = null;
        String loanAmendmentId = null;
        LoanAmendment response = api.ledgerLoansLoanIdAmendLoanAmendmentIdGet(loanId, loanAmendmentId);

        // TODO: test validations
    }
    /**
     * Approve a loan in \&quot;proposed\&quot; state. Borrowers should not send roundingRule, roundingMode, or minimumMarkPrice when approving a loan.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdAmendPostTest() throws Exception {
        LoanAmendmentProposal body = null;
        String loanId = null;
        LedgerResponse response = api.ledgerLoansLoanIdAmendPost(body, loanId);

        // TODO: test validations
    }
    /**
     * Approve a loan in \&quot;proposed\&quot; state. Borrowers should not send roundingRule, roundingMode, or minimumMarkPrice when approving a loan.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdApprovePostTest() throws Exception {
        LoanProposalApproval body = null;
        String loanId = null;
        LedgerResponse response = api.ledgerLoansLoanIdApprovePost(body, loanId);

        // TODO: test validations
    }
    /**
     * Cancel a loan in \&quot;proposed\&quot; state. Original proposer only.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdCancelPostTest() throws Exception {
        LoanCancelErrorResponse body = null;
        String loanId = null;
        LedgerResponse response = api.ledgerLoansLoanIdCancelPost(body, loanId);

        // TODO: test validations
    }
    /**
     * Cancel a loan in \&quot;pending\&quot; state. Either party can initiate.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdCancelpendingPostTest() throws Exception {
        String loanId = null;
        LedgerResponse response = api.ledgerLoansLoanIdCancelpendingPost(loanId);

        // TODO: test validations
    }
    /**
     * Close a loan in \&quot;open\&quot; state. Either party can initiate.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdClosePostTest() throws Exception {
        LoanCloseErrorResponse body = null;
        String loanId = null;
        LedgerResponse response = api.ledgerLoansLoanIdClosePost(body, loanId);

        // TODO: test validations
    }
    /**
     * Decline a loan in \&quot;proposed\&quot; state
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdDeclinePostTest() throws Exception {
        LoanDeclineErrorResponse body = null;
        String loanId = null;
        LedgerResponse response = api.ledgerLoansLoanIdDeclinePost(body, loanId);

        // TODO: test validations
    }
    /**
     * Read a specific loan the user is authorized to access
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdGetTest() throws Exception {
        String loanId = null;
        Loan response = api.ledgerLoansLoanIdGet(loanId);

        // TODO: test validations
    }
    /**
     * Return an ordered history of this loan. Each loan has a reference event that triggered a new version.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdHistoryGetTest() throws Exception {
        String loanId = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer size = null;
        List<EventType> eventType = null;
        Long eventId = null;
        SortOrder sortOrder = null;
        Loans response = api.ledgerLoansLoanIdHistoryGet(loanId, since, before, size, eventType, eventId, sortOrder);

        // TODO: test validations
    }
    /**
     * Update unilateral fields in a loan
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdPatchTest() throws Exception {
        String loanId = null;
        LoansLoanIdBody body = null;
        LedgerResponse response = api.ledgerLoansLoanIdPatch(loanId, body);

        // TODO: test validations
    }
    /**
     * Return an ordered history of effective rate changes.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdRatehistoryGetTest() throws Exception {
        String loanId = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer size = null;
        Rates response = api.ledgerLoansLoanIdRatehistoryGet(loanId, since, before, size);

        // TODO: test validations
    }
    /**
     * Acknowledge a loan split in \&quot;proposed\&quot; state.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostTest() throws Exception {
        List<LoanSplitLotAcknowledge> body = null;
        String loanId = null;
        String loanSplitId = null;
        LedgerResponse response = api.ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePost(body, loanId, loanSplitId);

        // TODO: test validations
    }
    /**
     * Retrieve a loan split.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdSplitLoanSplitIdGetTest() throws Exception {
        String loanId = null;
        String loanSplitId = null;
        LoanSplit response = api.ledgerLoansLoanIdSplitLoanSplitIdGet(loanId, loanSplitId);

        // TODO: test validations
    }
    /**
     * Split an open loan into multiple lots
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansLoanIdSplitPostTest() throws Exception {
        List<LoanSplitProposalLot> body = null;
        String loanId = null;
        LedgerResponse response = api.ledgerLoansLoanIdSplitPost(body, loanId);

        // TODO: test validations
    }
    /**
     * Create a loan in \&quot;proposal\&quot; state. Normally done by the Lend side
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerLoansPostTest() throws Exception {
        LoanProposal body = null;
        LedgerResponse response = api.ledgerLoansPost(body);

        // TODO: test validations
    }
}
