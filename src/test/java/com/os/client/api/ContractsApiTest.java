/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.model.Contract;
import com.os.client.model.ContractProposal;
import com.os.client.model.ContractProposalApproval;
import com.os.client.model.ContractSplit;
import com.os.client.model.ContractSplitLot;
import com.os.client.model.ContractSplitLotAppoval;
import com.os.client.model.ContractStatus;
import com.os.client.model.Contracts;
import com.os.client.model.ContractsContractIdBody;
import com.os.client.model.LedgerResponse;
import java.time.OffsetDateTime;
import com.os.client.model.Rates;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContractsApi
 */
@Ignore
public class ContractsApiTest {

    private final ContractsApi api = new ContractsApi();

    /**
     * Approve a contract in \&quot;proposed\&quot; state
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdApprovePostTest() throws Exception {
        ContractProposalApproval body = null;
        String contractId = null;
        LedgerResponse response = api.ledgerContractsContractIdApprovePost(body, contractId);

        // TODO: test validations
    }
    /**
     * Cancel a contract in \&quot;proposed\&quot; state. Original proposer only.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdCancelPostTest() throws Exception {
        String contractId = null;
        LedgerResponse response = api.ledgerContractsContractIdCancelPost(contractId);

        // TODO: test validations
    }
    /**
     * Cancel a contract in \&quot;pending\&quot; state. Either party can initiate.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdCancelpendingPostTest() throws Exception {
        String contractId = null;
        LedgerResponse response = api.ledgerContractsContractIdCancelpendingPost(contractId);

        // TODO: test validations
    }
    /**
     * Decline a contract in \&quot;proposed\&quot; state
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdDeclinePostTest() throws Exception {
        String contractId = null;
        LedgerResponse response = api.ledgerContractsContractIdDeclinePost(contractId);

        // TODO: test validations
    }
    /**
     * Read a specific contract the user is authorized to access
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdGetTest() throws Exception {
        String contractId = null;
        Contract response = api.ledgerContractsContractIdGet(contractId);

        // TODO: test validations
    }
    /**
     * Return an ordered history of this contract. Each contract has a reference event that triggered a new version.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdHistoryGetTest() throws Exception {
        String contractId = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer size = null;
        Contracts response = api.ledgerContractsContractIdHistoryGet(contractId, since, before, size);

        // TODO: test validations
    }
    /**
     * Update unilateral fields in a contract
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdPatchTest() throws Exception {
        String contractId = null;
        ContractsContractIdBody body = null;
        LedgerResponse response = api.ledgerContractsContractIdPatch(contractId, body);

        // TODO: test validations
    }
    /**
     * Return an ordered history of effective rate changes.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdRatehistoryGetTest() throws Exception {
        String contractId = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer size = null;
        Rates response = api.ledgerContractsContractIdRatehistoryGet(contractId, since, before, size);

        // TODO: test validations
    }
    /**
     * Approve a contract split in \&quot;proposed\&quot; state.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdSplitContractSplitIdApprovePostTest() throws Exception {
        List<ContractSplitLotAppoval> body = null;
        String contractId = null;
        String contractSplitId = null;
        LedgerResponse response = api.ledgerContractsContractIdSplitContractSplitIdApprovePost(body, contractId, contractSplitId);

        // TODO: test validations
    }
    /**
     * Retrieve a contract split.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdSplitContractSplitIdGetTest() throws Exception {
        String contractId = null;
        String contractSplitId = null;
        ContractSplit response = api.ledgerContractsContractIdSplitContractSplitIdGet(contractId, contractSplitId);

        // TODO: test validations
    }
    /**
     * Split an open contract into multiple lots
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsContractIdSplitPostTest() throws Exception {
        List<ContractSplitLot> body = null;
        String contractId = null;
        LedgerResponse response = api.ledgerContractsContractIdSplitPost(body, contractId);

        // TODO: test validations
    }
    /**
     * Read a collection of contracts. Defaults to return the last 100 contracts created.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsGetTest() throws Exception {
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer size = null;
        ContractStatus contractStatus = null;
        String figi = null;
        String sedol = null;
        String cusip = null;
        String ticker = null;
        String isin = null;
        String internalRefId = null;
        String partyId = null;
        Contracts response = api.ledgerContractsGet(since, before, size, contractStatus, figi, sedol, cusip, ticker, isin, internalRefId, partyId);

        // TODO: test validations
    }
    /**
     * Create a contract in \&quot;proposal\&quot; state. Normally done by the Lend side
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ledgerContractsPostTest() throws Exception {
        ContractProposal body = null;
        LedgerResponse response = api.ledgerContractsPost(body);

        // TODO: test validations
    }
}
