/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.os.client.model.BuyinComplete;
import com.os.client.model.BuyinCompleteRequest;
import com.os.client.model.BuyinCompletes;
import com.os.client.model.BuyinInitiate;
import com.os.client.model.BuyinInitiateRequest;
import com.os.client.model.BuyinInitiates;
import com.os.client.model.LedgerResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuyinsApi {
    private ApiClient apiClient;

    public BuyinsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuyinsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ledgerBuyinsCompletesBuyinCompleteIdGet
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesBuyinCompleteIdGetCall(String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/buyins/completes/{buyinCompleteId}"
            .replaceAll("\\{" + "buyinCompleteId" + "\\}", apiClient.escapeString(buyinCompleteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'buyinCompleteId' is set
        if (buyinCompleteId == null) {
            throw new ApiException("Missing the required parameter 'buyinCompleteId' when calling ledgerBuyinsCompletesBuyinCompleteIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesBuyinCompleteIdGetCall(buyinCompleteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a completed buyin
     * 
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return BuyinComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinComplete ledgerBuyinsCompletesBuyinCompleteIdGet(String buyinCompleteId) throws ApiException {
        ApiResponse<BuyinComplete> resp = ledgerBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(buyinCompleteId);
        return resp.getData();
    }

    /**
     * Read a completed buyin
     * 
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return ApiResponse&lt;BuyinComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinComplete> ledgerBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(String buyinCompleteId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(buyinCompleteId, null, null);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a completed buyin (asynchronously)
     * 
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesBuyinCompleteIdGetAsync(String buyinCompleteId, final ApiCallback<BuyinComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(buyinCompleteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerBuyinsCompletesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/buyins/completes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerBuyinsCompletesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of completed buyins
     * 
     * @return BuyinCompletes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinCompletes ledgerBuyinsCompletesGet() throws ApiException {
        ApiResponse<BuyinCompletes> resp = ledgerBuyinsCompletesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Read collection of completed buyins
     * 
     * @return ApiResponse&lt;BuyinCompletes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinCompletes> ledgerBuyinsCompletesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of completed buyins (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesGetAsync(final ApiCallback<BuyinCompletes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerBuyinsCompletesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerBuyinsInitiatesBuyinInitiateIdGet
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsInitiatesBuyinInitiateIdGetCall(String buyinInitiateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/buyins/initiates/{buyinInitiateId}"
            .replaceAll("\\{" + "buyinInitiateId" + "\\}", apiClient.escapeString(buyinInitiateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerBuyinsInitiatesBuyinInitiateIdGetValidateBeforeCall(String buyinInitiateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'buyinInitiateId' is set
        if (buyinInitiateId == null) {
            throw new ApiException("Missing the required parameter 'buyinInitiateId' when calling ledgerBuyinsInitiatesBuyinInitiateIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerBuyinsInitiatesBuyinInitiateIdGetCall(buyinInitiateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an initiated buyin
     * 
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @return BuyinInitiate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinInitiate ledgerBuyinsInitiatesBuyinInitiateIdGet(String buyinInitiateId) throws ApiException {
        ApiResponse<BuyinInitiate> resp = ledgerBuyinsInitiatesBuyinInitiateIdGetWithHttpInfo(buyinInitiateId);
        return resp.getData();
    }

    /**
     * Read an initiated buyin
     * 
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @return ApiResponse&lt;BuyinInitiate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinInitiate> ledgerBuyinsInitiatesBuyinInitiateIdGetWithHttpInfo(String buyinInitiateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerBuyinsInitiatesBuyinInitiateIdGetValidateBeforeCall(buyinInitiateId, null, null);
        Type localVarReturnType = new TypeToken<BuyinInitiate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an initiated buyin (asynchronously)
     * 
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsInitiatesBuyinInitiateIdGetAsync(String buyinInitiateId, final ApiCallback<BuyinInitiate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerBuyinsInitiatesBuyinInitiateIdGetValidateBeforeCall(buyinInitiateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinInitiate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerBuyinsInitiatesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsInitiatesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/buyins/initiates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerBuyinsInitiatesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerBuyinsInitiatesGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of initiated buyins
     * 
     * @return BuyinInitiates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinInitiates ledgerBuyinsInitiatesGet() throws ApiException {
        ApiResponse<BuyinInitiates> resp = ledgerBuyinsInitiatesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Read collection of initiated buyins
     * 
     * @return ApiResponse&lt;BuyinInitiates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinInitiates> ledgerBuyinsInitiatesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = ledgerBuyinsInitiatesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BuyinInitiates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of initiated buyins (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsInitiatesGetAsync(final ApiCallback<BuyinInitiates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerBuyinsInitiatesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinInitiates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPost
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostCall(String contractId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/completes/{buyinCompleteId}/accept"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "buyinCompleteId" + "\\}", apiClient.escapeString(buyinCompleteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostValidateBeforeCall(String contractId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPost(Async)");
        }
        // verify the required parameter 'buyinCompleteId' is set
        if (buyinCompleteId == null) {
            throw new ApiException("Missing the required parameter 'buyinCompleteId' when calling ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostCall(contractId, buyinCompleteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete some or all of an initiated Buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPost(String contractId, String buyinCompleteId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostWithHttpInfo(contractId, buyinCompleteId);
        return resp.getData();
    }

    /**
     * Complete some or all of an initiated Buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostWithHttpInfo(String contractId, String buyinCompleteId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostValidateBeforeCall(contractId, buyinCompleteId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Complete some or all of an initiated Buyin (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostAsync(String contractId, String buyinCompleteId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdAcceptPostValidateBeforeCall(contractId, buyinCompleteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGet
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetCall(String contractId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/completes/{buyinCompleteId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "buyinCompleteId" + "\\}", apiClient.escapeString(buyinCompleteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(String contractId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGet(Async)");
        }
        // verify the required parameter 'buyinCompleteId' is set
        if (buyinCompleteId == null) {
            throw new ApiException("Missing the required parameter 'buyinCompleteId' when calling ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetCall(contractId, buyinCompleteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a completed Buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return BuyinComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinComplete ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGet(String contractId, String buyinCompleteId) throws ApiException {
        ApiResponse<BuyinComplete> resp = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(contractId, buyinCompleteId);
        return resp.getData();
    }

    /**
     * Read a completed Buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return ApiResponse&lt;BuyinComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinComplete> ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(String contractId, String buyinCompleteId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(contractId, buyinCompleteId, null, null);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a completed Buyin (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetAsync(String contractId, String buyinCompleteId, final ApiCallback<BuyinComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(contractId, buyinCompleteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsCompletesGet
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesGetCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/completes"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesGetValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsCompletesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesGetCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of completed buyins against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return BuyinCompletes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinCompletes ledgerContractsContractIdBuyinsCompletesGet(String contractId) throws ApiException {
        ApiResponse<BuyinCompletes> resp = ledgerContractsContractIdBuyinsCompletesGetWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Read collection of completed buyins against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;BuyinCompletes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinCompletes> ledgerContractsContractIdBuyinsCompletesGetWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesGetValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of completed buyins against contract specified by &#x27;contractId&#x27; (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesGetAsync(String contractId, final ApiCallback<BuyinCompletes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesGetValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsCompletesPost
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesPostCall(String contractId, BuyinCompleteRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/completes"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesPostValidateBeforeCall(String contractId, BuyinCompleteRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsCompletesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesPostCall(contractId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete a buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdBuyinsCompletesPost(String contractId, BuyinCompleteRequest body) throws ApiException {
        ledgerContractsContractIdBuyinsCompletesPostWithHttpInfo(contractId, body);
    }

    /**
     * Complete a buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdBuyinsCompletesPostWithHttpInfo(String contractId, BuyinCompleteRequest body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesPostValidateBeforeCall(contractId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Complete a buyin (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsCompletesPostAsync(String contractId, BuyinCompleteRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsCompletesPostValidateBeforeCall(contractId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPost
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostCall(String contractId, String buyinInitiateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/initiates/{buyinInitiateId}/cancel"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "buyinInitiateId" + "\\}", apiClient.escapeString(buyinInitiateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostValidateBeforeCall(String contractId, String buyinInitiateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPost(Async)");
        }
        // verify the required parameter 'buyinInitiateId' is set
        if (buyinInitiateId == null) {
            throw new ApiException("Missing the required parameter 'buyinInitiateId' when calling ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostCall(contractId, buyinInitiateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel an initiated buyin. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPost(String contractId, String buyinInitiateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostWithHttpInfo(contractId, buyinInitiateId);
        return resp.getData();
    }

    /**
     * Cancel an initiated buyin. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostWithHttpInfo(String contractId, String buyinInitiateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostValidateBeforeCall(contractId, buyinInitiateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel an initiated buyin. Original proposer only. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostAsync(String contractId, String buyinInitiateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdCancelPostValidateBeforeCall(contractId, buyinInitiateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGet
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetCall(String contractId, String buyinInitiateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/initiates/{buyinInitiateId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "buyinInitiateId" + "\\}", apiClient.escapeString(buyinInitiateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetValidateBeforeCall(String contractId, String buyinInitiateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGet(Async)");
        }
        // verify the required parameter 'buyinInitiateId' is set
        if (buyinInitiateId == null) {
            throw new ApiException("Missing the required parameter 'buyinInitiateId' when calling ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetCall(contractId, buyinInitiateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an initiated buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @return BuyinInitiate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinInitiate ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGet(String contractId, String buyinInitiateId) throws ApiException {
        ApiResponse<BuyinInitiate> resp = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetWithHttpInfo(contractId, buyinInitiateId);
        return resp.getData();
    }

    /**
     * Read an initiated buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @return ApiResponse&lt;BuyinInitiate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinInitiate> ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetWithHttpInfo(String contractId, String buyinInitiateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetValidateBeforeCall(contractId, buyinInitiateId, null, null);
        Type localVarReturnType = new TypeToken<BuyinInitiate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an initiated buyin (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param buyinInitiateId The unique identifier of an initiated buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetAsync(String contractId, String buyinInitiateId, final ApiCallback<BuyinInitiate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesBuyinInitiateIdGetValidateBeforeCall(contractId, buyinInitiateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinInitiate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsInitiatesGet
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesGetCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/initiates"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesGetValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsInitiatesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesGetCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of initiated buyins against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return BuyinInitiates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinInitiates ledgerContractsContractIdBuyinsInitiatesGet(String contractId) throws ApiException {
        ApiResponse<BuyinInitiates> resp = ledgerContractsContractIdBuyinsInitiatesGetWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Read collection of initiated buyins against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;BuyinInitiates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinInitiates> ledgerContractsContractIdBuyinsInitiatesGetWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesGetValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<BuyinInitiates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of initiated buyins against contract specified by &#x27;contractId&#x27; (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesGetAsync(String contractId, final ApiCallback<BuyinInitiates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesGetValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinInitiates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdBuyinsInitiatesPost
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesPostCall(String contractId, BuyinInitiateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/buyins/initiates"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesPostValidateBeforeCall(String contractId, BuyinInitiateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdBuyinsInitiatesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesPostCall(contractId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Initiate a buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdBuyinsInitiatesPost(String contractId, BuyinInitiateRequest body) throws ApiException {
        ledgerContractsContractIdBuyinsInitiatesPostWithHttpInfo(contractId, body);
    }

    /**
     * Initiate a buyin
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdBuyinsInitiatesPostWithHttpInfo(String contractId, BuyinInitiateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesPostValidateBeforeCall(contractId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Initiate a buyin (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdBuyinsInitiatesPostAsync(String contractId, BuyinInitiateRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdBuyinsInitiatesPostValidateBeforeCall(contractId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
