/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.1
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;
import com.os.client.model.BuyinComplete;
import com.os.client.model.BuyinCompleteRequest;
import com.os.client.model.BuyinCompleteStatus;
import com.os.client.model.BuyinCompletes;
import com.os.client.model.LedgerResponse;

public class BuyinsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public BuyinsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuyinsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for ledgerBuyinsCompletesBuyinCompleteIdGet
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesBuyinCompleteIdGetCall(String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/buyins/completes/{buyinCompleteId}"
            .replaceAll("\\{" + "buyinCompleteId" + "\\}", apiClient.escapeString(buyinCompleteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'buyinCompleteId' is set
        if (buyinCompleteId == null) {
            throw new ApiException("Missing the required parameter 'buyinCompleteId' when calling ledgerBuyinsCompletesBuyinCompleteIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesBuyinCompleteIdGetCall(buyinCompleteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a completed buyin
     * 
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return BuyinComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinComplete ledgerBuyinsCompletesBuyinCompleteIdGet(String buyinCompleteId) throws ApiException {
        ApiResponse<BuyinComplete> resp = ledgerBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(buyinCompleteId);
        return resp.getData();
    }

    /**
     * Read a completed buyin
     * 
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return ApiResponse&lt;BuyinComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinComplete> ledgerBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(String buyinCompleteId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(buyinCompleteId, null, null);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a completed buyin (asynchronously)
     * 
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesBuyinCompleteIdGetAsync(String buyinCompleteId, final ApiCallback<BuyinComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(buyinCompleteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerBuyinsCompletesGet
     * @param since Completed buyins updated (since) timestamp UTC (optional)
     * @param before Completed buyins updated (before) timestamp UTC (optional)
     * @param size Number of completed buyins to be returned. Can be used to facilitate paging (optional)
     * @param buyinCompleteStatus Completed buyins matching status BUYIN COMPLETE STATUS (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesGetCall(OffsetDateTime since, OffsetDateTime before, Integer size, BuyinCompleteStatus buyinCompleteStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/buyins/completes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (buyinCompleteStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("buyinCompleteStatus", buyinCompleteStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerBuyinsCompletesGetValidateBeforeCall(OffsetDateTime since, OffsetDateTime before, Integer size, BuyinCompleteStatus buyinCompleteStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesGetCall(since, before, size, buyinCompleteStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of completed buyins
     * 
     * @param since Completed buyins updated (since) timestamp UTC (optional)
     * @param before Completed buyins updated (before) timestamp UTC (optional)
     * @param size Number of completed buyins to be returned. Can be used to facilitate paging (optional)
     * @param buyinCompleteStatus Completed buyins matching status BUYIN COMPLETE STATUS (optional)
     * @return BuyinCompletes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinCompletes ledgerBuyinsCompletesGet(OffsetDateTime since, OffsetDateTime before, Integer size, BuyinCompleteStatus buyinCompleteStatus) throws ApiException {
        ApiResponse<BuyinCompletes> resp = ledgerBuyinsCompletesGetWithHttpInfo(since, before, size, buyinCompleteStatus);
        return resp.getData();
    }

    /**
     * Read collection of completed buyins
     * 
     * @param since Completed buyins updated (since) timestamp UTC (optional)
     * @param before Completed buyins updated (before) timestamp UTC (optional)
     * @param size Number of completed buyins to be returned. Can be used to facilitate paging (optional)
     * @param buyinCompleteStatus Completed buyins matching status BUYIN COMPLETE STATUS (optional)
     * @return ApiResponse&lt;BuyinCompletes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinCompletes> ledgerBuyinsCompletesGetWithHttpInfo(OffsetDateTime since, OffsetDateTime before, Integer size, BuyinCompleteStatus buyinCompleteStatus) throws ApiException {
        com.squareup.okhttp.Call call = ledgerBuyinsCompletesGetValidateBeforeCall(since, before, size, buyinCompleteStatus, null, null);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of completed buyins (asynchronously)
     * 
     * @param since Completed buyins updated (since) timestamp UTC (optional)
     * @param before Completed buyins updated (before) timestamp UTC (optional)
     * @param size Number of completed buyins to be returned. Can be used to facilitate paging (optional)
     * @param buyinCompleteStatus Completed buyins matching status BUYIN COMPLETE STATUS (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerBuyinsCompletesGetAsync(OffsetDateTime since, OffsetDateTime before, Integer size, BuyinCompleteStatus buyinCompleteStatus, final ApiCallback<BuyinCompletes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerBuyinsCompletesGetValidateBeforeCall(since, before, size, buyinCompleteStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPost
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostCall(String loanId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/buyins/completes/{buyinCompleteId}/accept"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "buyinCompleteId" + "\\}", apiClient.escapeString(buyinCompleteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostValidateBeforeCall(String loanId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPost(Async)");
        }
        // verify the required parameter 'buyinCompleteId' is set
        if (buyinCompleteId == null) {
            throw new ApiException("Missing the required parameter 'buyinCompleteId' when calling ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostCall(loanId, buyinCompleteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete some or all of an initiated Buyin
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPost(String loanId, String buyinCompleteId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostWithHttpInfo(loanId, buyinCompleteId);
        return resp.getData();
    }

    /**
     * Complete some or all of an initiated Buyin
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostWithHttpInfo(String loanId, String buyinCompleteId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostValidateBeforeCall(loanId, buyinCompleteId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Complete some or all of an initiated Buyin (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostAsync(String loanId, String buyinCompleteId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdAcceptPostValidateBeforeCall(loanId, buyinCompleteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGet
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetCall(String loanId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/buyins/completes/{buyinCompleteId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "buyinCompleteId" + "\\}", apiClient.escapeString(buyinCompleteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(String loanId, String buyinCompleteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGet(Async)");
        }
        // verify the required parameter 'buyinCompleteId' is set
        if (buyinCompleteId == null) {
            throw new ApiException("Missing the required parameter 'buyinCompleteId' when calling ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetCall(loanId, buyinCompleteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a completed Buyin
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return BuyinComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinComplete ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGet(String loanId, String buyinCompleteId) throws ApiException {
        ApiResponse<BuyinComplete> resp = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(loanId, buyinCompleteId);
        return resp.getData();
    }

    /**
     * Read a completed Buyin
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @return ApiResponse&lt;BuyinComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinComplete> ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetWithHttpInfo(String loanId, String buyinCompleteId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(loanId, buyinCompleteId, null, null);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a completed Buyin (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param buyinCompleteId The unique identifier of a completed buyin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetAsync(String loanId, String buyinCompleteId, final ApiCallback<BuyinComplete> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesBuyinCompleteIdGetValidateBeforeCall(loanId, buyinCompleteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinComplete>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdBuyinsCompletesGet
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesGetCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/buyins/completes"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesGetValidateBeforeCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdBuyinsCompletesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesGetCall(loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of completed buyins against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return BuyinCompletes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BuyinCompletes ledgerLoansLoanIdBuyinsCompletesGet(String loanId) throws ApiException {
        ApiResponse<BuyinCompletes> resp = ledgerLoansLoanIdBuyinsCompletesGetWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * Read collection of completed buyins against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;BuyinCompletes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BuyinCompletes> ledgerLoansLoanIdBuyinsCompletesGetWithHttpInfo(String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesGetValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of completed buyins against loan specified by &#x27;loanId&#x27; (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesGetAsync(String loanId, final ApiCallback<BuyinCompletes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesGetValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BuyinCompletes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdBuyinsCompletesPost
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesPostCall(String loanId, BuyinCompleteRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/buyins/completes"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesPostValidateBeforeCall(String loanId, BuyinCompleteRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdBuyinsCompletesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesPostCall(loanId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete a buyin
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerLoansLoanIdBuyinsCompletesPost(String loanId, BuyinCompleteRequest body) throws ApiException {
        ledgerLoansLoanIdBuyinsCompletesPostWithHttpInfo(loanId, body);
    }

    /**
     * Complete a buyin
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerLoansLoanIdBuyinsCompletesPostWithHttpInfo(String loanId, BuyinCompleteRequest body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesPostValidateBeforeCall(loanId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Complete a buyin (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdBuyinsCompletesPostAsync(String loanId, BuyinCompleteRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdBuyinsCompletesPostValidateBeforeCall(loanId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
