/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.1
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;
import com.os.client.model.EventType;
import com.os.client.model.LedgerResponse;
import com.os.client.model.Loan;
import com.os.client.model.LoanCancelErrorResponse;
import com.os.client.model.LoanCancelPendingErrorResponse;
import com.os.client.model.LoanDeclineErrorResponse;
import com.os.client.model.LoanProposal;
import com.os.client.model.LoanProposalApproval;
import com.os.client.model.LoanSplit;
import com.os.client.model.LoanSplitLotAcknowledge;
import com.os.client.model.LoanSplitProposalLot;
import com.os.client.model.LoanStatus;
import com.os.client.model.Loans;
import com.os.client.model.LoansLoanIdBody;
import com.os.client.model.Rates;
import com.os.client.model.SortOrder;

public class LoansApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public LoansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoansApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for ledgerLoansGet
     * @param since Loans updated (since) timestamp UTC (optional)
     * @param before Loans updated (before) timestamp UTC (optional)
     * @param size Number of loans to be returned. Can be used to facilitate paging (optional)
     * @param loanStatus Loans with status matching LOAN STATUS (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansGetCall(OffsetDateTime since, OffsetDateTime before, Integer size, LoanStatus loanStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (loanStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("loanStatus", loanStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansGetValidateBeforeCall(OffsetDateTime since, OffsetDateTime before, Integer size, LoanStatus loanStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerLoansGetCall(since, before, size, loanStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a collection of loans. Defaults to return the last 100 loans updated.
     * 
     * @param since Loans updated (since) timestamp UTC (optional)
     * @param before Loans updated (before) timestamp UTC (optional)
     * @param size Number of loans to be returned. Can be used to facilitate paging (optional)
     * @param loanStatus Loans with status matching LOAN STATUS (optional)
     * @return Loans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Loans ledgerLoansGet(OffsetDateTime since, OffsetDateTime before, Integer size, LoanStatus loanStatus) throws ApiException {
        ApiResponse<Loans> resp = ledgerLoansGetWithHttpInfo(since, before, size, loanStatus);
        return resp.getData();
    }

    /**
     * Read a collection of loans. Defaults to return the last 100 loans updated.
     * 
     * @param since Loans updated (since) timestamp UTC (optional)
     * @param before Loans updated (before) timestamp UTC (optional)
     * @param size Number of loans to be returned. Can be used to facilitate paging (optional)
     * @param loanStatus Loans with status matching LOAN STATUS (optional)
     * @return ApiResponse&lt;Loans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Loans> ledgerLoansGetWithHttpInfo(OffsetDateTime since, OffsetDateTime before, Integer size, LoanStatus loanStatus) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansGetValidateBeforeCall(since, before, size, loanStatus, null, null);
        Type localVarReturnType = new TypeToken<Loans>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a collection of loans. Defaults to return the last 100 loans updated. (asynchronously)
     * 
     * @param since Loans updated (since) timestamp UTC (optional)
     * @param before Loans updated (before) timestamp UTC (optional)
     * @param size Number of loans to be returned. Can be used to facilitate paging (optional)
     * @param loanStatus Loans with status matching LOAN STATUS (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansGetAsync(OffsetDateTime since, OffsetDateTime before, Integer size, LoanStatus loanStatus, final ApiCallback<Loans> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansGetValidateBeforeCall(since, before, size, loanStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Loans>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdApprovePost
     * @param body Update settlement instructions on an existing loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdApprovePostCall(LoanProposalApproval body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/approve"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdApprovePostValidateBeforeCall(LoanProposalApproval body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdApprovePost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdApprovePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdApprovePostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve a loan in \&quot;proposed\&quot; state
     * 
     * @param body Update settlement instructions on an existing loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdApprovePost(LoanProposalApproval body, String loanId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdApprovePostWithHttpInfo(body, loanId);
        return resp.getData();
    }

    /**
     * Approve a loan in \&quot;proposed\&quot; state
     * 
     * @param body Update settlement instructions on an existing loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdApprovePostWithHttpInfo(LoanProposalApproval body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdApprovePostValidateBeforeCall(body, loanId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve a loan in \&quot;proposed\&quot; state (asynchronously)
     * 
     * @param body Update settlement instructions on an existing loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdApprovePostAsync(LoanProposalApproval body, String loanId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdApprovePostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdCancelPost
     * @param body Reason for canceling a proposed loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdCancelPostCall(LoanCancelErrorResponse body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/cancel"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdCancelPostValidateBeforeCall(LoanCancelErrorResponse body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdCancelPost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdCancelPostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a loan in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param body Reason for canceling a proposed loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdCancelPost(LoanCancelErrorResponse body, String loanId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdCancelPostWithHttpInfo(body, loanId);
        return resp.getData();
    }

    /**
     * Cancel a loan in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param body Reason for canceling a proposed loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdCancelPostWithHttpInfo(LoanCancelErrorResponse body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdCancelPostValidateBeforeCall(body, loanId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a loan in \&quot;proposed\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param body Reason for canceling a proposed loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdCancelPostAsync(LoanCancelErrorResponse body, String loanId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdCancelPostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdCancelpendingPost
     * @param body Reason for canceling a pending loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdCancelpendingPostCall(LoanCancelPendingErrorResponse body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/cancelpending"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdCancelpendingPostValidateBeforeCall(LoanCancelPendingErrorResponse body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdCancelpendingPost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdCancelpendingPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdCancelpendingPostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a loan in \&quot;pending\&quot; state. Either party can initiate.
     * 
     * @param body Reason for canceling a pending loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdCancelpendingPost(LoanCancelPendingErrorResponse body, String loanId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdCancelpendingPostWithHttpInfo(body, loanId);
        return resp.getData();
    }

    /**
     * Cancel a loan in \&quot;pending\&quot; state. Either party can initiate.
     * 
     * @param body Reason for canceling a pending loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdCancelpendingPostWithHttpInfo(LoanCancelPendingErrorResponse body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdCancelpendingPostValidateBeforeCall(body, loanId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a loan in \&quot;pending\&quot; state. Either party can initiate. (asynchronously)
     * 
     * @param body Reason for canceling a pending loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdCancelpendingPostAsync(LoanCancelPendingErrorResponse body, String loanId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdCancelpendingPostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdDeclinePost
     * @param body Provide reason and details for declining loan proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdDeclinePostCall(LoanDeclineErrorResponse body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/decline"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdDeclinePostValidateBeforeCall(LoanDeclineErrorResponse body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdDeclinePost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdDeclinePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdDeclinePostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Decline a loan in \&quot;proposed\&quot; state
     * 
     * @param body Provide reason and details for declining loan proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdDeclinePost(LoanDeclineErrorResponse body, String loanId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdDeclinePostWithHttpInfo(body, loanId);
        return resp.getData();
    }

    /**
     * Decline a loan in \&quot;proposed\&quot; state
     * 
     * @param body Provide reason and details for declining loan proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdDeclinePostWithHttpInfo(LoanDeclineErrorResponse body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdDeclinePostValidateBeforeCall(body, loanId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decline a loan in \&quot;proposed\&quot; state (asynchronously)
     * 
     * @param body Provide reason and details for declining loan proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdDeclinePostAsync(LoanDeclineErrorResponse body, String loanId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdDeclinePostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdGet
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdGetCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdGetValidateBeforeCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdGetCall(loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a specific loan the user is authorized to access
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return Loan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Loan ledgerLoansLoanIdGet(String loanId) throws ApiException {
        ApiResponse<Loan> resp = ledgerLoansLoanIdGetWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * Read a specific loan the user is authorized to access
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;Loan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Loan> ledgerLoansLoanIdGetWithHttpInfo(String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdGetValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<Loan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a specific loan the user is authorized to access (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdGetAsync(String loanId, final ApiCallback<Loan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdGetValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Loan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdHistoryGet
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of loan changes to be returned. Can be used to facilitate paging (optional)
     * @param eventType Filter by event type (optional)
     * @param sortOrder Sort history by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdHistoryGetCall(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, List<EventType> eventType, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/history"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdHistoryGetValidateBeforeCall(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, List<EventType> eventType, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdHistoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdHistoryGetCall(loanId, since, before, size, eventType, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return an ordered history of this loan. Each loan has a reference event that triggered a new version.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of loan changes to be returned. Can be used to facilitate paging (optional)
     * @param eventType Filter by event type (optional)
     * @param sortOrder Sort history by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @return Loans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Loans ledgerLoansLoanIdHistoryGet(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, List<EventType> eventType, SortOrder sortOrder) throws ApiException {
        ApiResponse<Loans> resp = ledgerLoansLoanIdHistoryGetWithHttpInfo(loanId, since, before, size, eventType, sortOrder);
        return resp.getData();
    }

    /**
     * Return an ordered history of this loan. Each loan has a reference event that triggered a new version.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of loan changes to be returned. Can be used to facilitate paging (optional)
     * @param eventType Filter by event type (optional)
     * @param sortOrder Sort history by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @return ApiResponse&lt;Loans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Loans> ledgerLoansLoanIdHistoryGetWithHttpInfo(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, List<EventType> eventType, SortOrder sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdHistoryGetValidateBeforeCall(loanId, since, before, size, eventType, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<Loans>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return an ordered history of this loan. Each loan has a reference event that triggered a new version. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of loan changes to be returned. Can be used to facilitate paging (optional)
     * @param eventType Filter by event type (optional)
     * @param sortOrder Sort history by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdHistoryGetAsync(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, List<EventType> eventType, SortOrder sortOrder, final ApiCallback<Loans> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdHistoryGetValidateBeforeCall(loanId, since, before, size, eventType, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Loans>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdPatch
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdPatchCall(String loanId, LoansLoanIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdPatchValidateBeforeCall(String loanId, LoansLoanIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdPatchCall(loanId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update unilateral fields in a loan
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdPatch(String loanId, LoansLoanIdBody body) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdPatchWithHttpInfo(loanId, body);
        return resp.getData();
    }

    /**
     * Update unilateral fields in a loan
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdPatchWithHttpInfo(String loanId, LoansLoanIdBody body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdPatchValidateBeforeCall(loanId, body, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update unilateral fields in a loan (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdPatchAsync(String loanId, LoansLoanIdBody body, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdPatchValidateBeforeCall(loanId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdRatehistoryGet
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRatehistoryGetCall(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/ratehistory"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdRatehistoryGetValidateBeforeCall(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdRatehistoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRatehistoryGetCall(loanId, since, before, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return an ordered history of effective rate changes.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @return Rates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rates ledgerLoansLoanIdRatehistoryGet(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size) throws ApiException {
        ApiResponse<Rates> resp = ledgerLoansLoanIdRatehistoryGetWithHttpInfo(loanId, since, before, size);
        return resp.getData();
    }

    /**
     * Return an ordered history of effective rate changes.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @return ApiResponse&lt;Rates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rates> ledgerLoansLoanIdRatehistoryGetWithHttpInfo(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRatehistoryGetValidateBeforeCall(loanId, since, before, size, null, null);
        Type localVarReturnType = new TypeToken<Rates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return an ordered history of effective rate changes. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRatehistoryGetAsync(String loanId, OffsetDateTime since, OffsetDateTime before, Integer size, final ApiCallback<Rates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdRatehistoryGetValidateBeforeCall(loanId, since, before, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePost
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a proposed loan split (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostCall(List<LoanSplitLotAcknowledge> body, String loanId, String loanSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/split/{loanSplitId}/acknowledge"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "loanSplitId" + "\\}", apiClient.escapeString(loanSplitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostValidateBeforeCall(List<LoanSplitLotAcknowledge> body, String loanId, String loanSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'loanSplitId' is set
        if (loanSplitId == null) {
            throw new ApiException("Missing the required parameter 'loanSplitId' when calling ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostCall(body, loanId, loanSplitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Acknowledge a loan split in \&quot;proposed\&quot; state.
     * 
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a proposed loan split (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePost(List<LoanSplitLotAcknowledge> body, String loanId, String loanSplitId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostWithHttpInfo(body, loanId, loanSplitId);
        return resp.getData();
    }

    /**
     * Acknowledge a loan split in \&quot;proposed\&quot; state.
     * 
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a proposed loan split (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostWithHttpInfo(List<LoanSplitLotAcknowledge> body, String loanId, String loanSplitId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostValidateBeforeCall(body, loanId, loanSplitId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Acknowledge a loan split in \&quot;proposed\&quot; state. (asynchronously)
     * 
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a proposed loan split (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostAsync(List<LoanSplitLotAcknowledge> body, String loanId, String loanSplitId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitLoanSplitIdAcknowledgePostValidateBeforeCall(body, loanId, loanSplitId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdSplitLoanSplitIdGet
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a loan split (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdSplitLoanSplitIdGetCall(String loanId, String loanSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/split/{loanSplitId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "loanSplitId" + "\\}", apiClient.escapeString(loanSplitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdSplitLoanSplitIdGetValidateBeforeCall(String loanId, String loanSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdSplitLoanSplitIdGet(Async)");
        }
        // verify the required parameter 'loanSplitId' is set
        if (loanSplitId == null) {
            throw new ApiException("Missing the required parameter 'loanSplitId' when calling ledgerLoansLoanIdSplitLoanSplitIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitLoanSplitIdGetCall(loanId, loanSplitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a loan split.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a loan split (required)
     * @return LoanSplit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoanSplit ledgerLoansLoanIdSplitLoanSplitIdGet(String loanId, String loanSplitId) throws ApiException {
        ApiResponse<LoanSplit> resp = ledgerLoansLoanIdSplitLoanSplitIdGetWithHttpInfo(loanId, loanSplitId);
        return resp.getData();
    }

    /**
     * Retrieve a loan split.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a loan split (required)
     * @return ApiResponse&lt;LoanSplit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoanSplit> ledgerLoansLoanIdSplitLoanSplitIdGetWithHttpInfo(String loanId, String loanSplitId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitLoanSplitIdGetValidateBeforeCall(loanId, loanSplitId, null, null);
        Type localVarReturnType = new TypeToken<LoanSplit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a loan split. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param loanSplitId The unique identifier of a loan split (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdSplitLoanSplitIdGetAsync(String loanId, String loanSplitId, final ApiCallback<LoanSplit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitLoanSplitIdGetValidateBeforeCall(loanId, loanSplitId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoanSplit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdSplitPost
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdSplitPostCall(List<LoanSplitProposalLot> body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/split"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdSplitPostValidateBeforeCall(List<LoanSplitProposalLot> body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdSplitPost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdSplitPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitPostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Split an open loan into multiple lots
     * 
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdSplitPost(List<LoanSplitProposalLot> body, String loanId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdSplitPostWithHttpInfo(body, loanId);
        return resp.getData();
    }

    /**
     * Split an open loan into multiple lots
     * 
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdSplitPostWithHttpInfo(List<LoanSplitProposalLot> body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitPostValidateBeforeCall(body, loanId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split an open loan into multiple lots (asynchronously)
     * 
     * @param body Split proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdSplitPostAsync(List<LoanSplitProposalLot> body, String loanId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdSplitPostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansPost
     * @param body New loan proposed for inclusion in the ledger (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansPostCall(LoanProposal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansPostValidateBeforeCall(LoanProposal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a loan in \&quot;proposal\&quot; state. Normally done by the Lend side
     * 
     * @param body New loan proposed for inclusion in the ledger (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansPost(LoanProposal body) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a loan in \&quot;proposal\&quot; state. Normally done by the Lend side
     * 
     * @param body New loan proposed for inclusion in the ledger (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansPostWithHttpInfo(LoanProposal body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a loan in \&quot;proposal\&quot; state. Normally done by the Lend side (asynchronously)
     * 
     * @param body New loan proposed for inclusion in the ledger (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansPostAsync(LoanProposal body, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
