/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.os.client.model.Contract;
import com.os.client.model.ContractProposal;
import com.os.client.model.ContractProposalApproval;
import com.os.client.model.ContractSplit;
import com.os.client.model.ContractSplitLot;
import com.os.client.model.ContractSplitLotAppoval;
import com.os.client.model.ContractStatus;
import com.os.client.model.Contracts;
import com.os.client.model.ContractsContractIdBody;
import com.os.client.model.LedgerResponse;
import java.time.OffsetDateTime;
import com.os.client.model.Rates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContractsApi {
    private ApiClient apiClient;

    public ContractsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContractsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ledgerContractsContractIdApprovePost
     * @param body Update settlement instructions on an existing contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdApprovePostCall(ContractProposalApproval body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/approve"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdApprovePostValidateBeforeCall(ContractProposalApproval body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdApprovePost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdApprovePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdApprovePostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve a contract in \&quot;proposed\&quot; state
     * 
     * @param body Update settlement instructions on an existing contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdApprovePost(ContractProposalApproval body, String contractId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdApprovePostWithHttpInfo(body, contractId);
        return resp.getData();
    }

    /**
     * Approve a contract in \&quot;proposed\&quot; state
     * 
     * @param body Update settlement instructions on an existing contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdApprovePostWithHttpInfo(ContractProposalApproval body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdApprovePostValidateBeforeCall(body, contractId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve a contract in \&quot;proposed\&quot; state (asynchronously)
     * 
     * @param body Update settlement instructions on an existing contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdApprovePostAsync(ContractProposalApproval body, String contractId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdApprovePostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdCancelPost
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdCancelPostCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/cancel"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdCancelPostValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdCancelPostCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a contract in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdCancelPost(String contractId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdCancelPostWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Cancel a contract in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdCancelPostWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdCancelPostValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a contract in \&quot;proposed\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdCancelPostAsync(String contractId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdCancelPostValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdCancelpendingPost
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdCancelpendingPostCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/cancelpending"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdCancelpendingPostValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdCancelpendingPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdCancelpendingPostCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a contract in \&quot;pending\&quot; state. Either party can initiate.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdCancelpendingPost(String contractId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdCancelpendingPostWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Cancel a contract in \&quot;pending\&quot; state. Either party can initiate.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdCancelpendingPostWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdCancelpendingPostValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a contract in \&quot;pending\&quot; state. Either party can initiate. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdCancelpendingPostAsync(String contractId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdCancelpendingPostValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdDeclinePost
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdDeclinePostCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/decline"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdDeclinePostValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdDeclinePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdDeclinePostCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Decline a contract in \&quot;proposed\&quot; state
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdDeclinePost(String contractId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdDeclinePostWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Decline a contract in \&quot;proposed\&quot; state
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdDeclinePostWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdDeclinePostValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decline a contract in \&quot;proposed\&quot; state (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdDeclinePostAsync(String contractId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdDeclinePostValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdGet
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdGetCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdGetValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdGetCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a specific contract the user is authorized to access
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return Contract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contract ledgerContractsContractIdGet(String contractId) throws ApiException {
        ApiResponse<Contract> resp = ledgerContractsContractIdGetWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Read a specific contract the user is authorized to access
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Contract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contract> ledgerContractsContractIdGetWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdGetValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a specific contract the user is authorized to access (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdGetAsync(String contractId, final ApiCallback<Contract> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdGetValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdHistoryGet
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of contract changes to be returned. Can be used to facilitate paging (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdHistoryGetCall(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/history"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdHistoryGetValidateBeforeCall(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdHistoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdHistoryGetCall(contractId, since, before, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return an ordered history of this contract. Each contract has a reference event that triggered a new version.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of contract changes to be returned. Can be used to facilitate paging (optional)
     * @return Contracts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contracts ledgerContractsContractIdHistoryGet(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size) throws ApiException {
        ApiResponse<Contracts> resp = ledgerContractsContractIdHistoryGetWithHttpInfo(contractId, since, before, size);
        return resp.getData();
    }

    /**
     * Return an ordered history of this contract. Each contract has a reference event that triggered a new version.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of contract changes to be returned. Can be used to facilitate paging (optional)
     * @return ApiResponse&lt;Contracts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contracts> ledgerContractsContractIdHistoryGetWithHttpInfo(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdHistoryGetValidateBeforeCall(contractId, since, before, size, null, null);
        Type localVarReturnType = new TypeToken<Contracts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return an ordered history of this contract. Each contract has a reference event that triggered a new version. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of contract changes to be returned. Can be used to facilitate paging (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdHistoryGetAsync(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size, final ApiCallback<Contracts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdHistoryGetValidateBeforeCall(contractId, since, before, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contracts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdPatch
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdPatchCall(String contractId, ContractsContractIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdPatchValidateBeforeCall(String contractId, ContractsContractIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdPatchCall(contractId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update unilateral fields in a contract
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdPatch(String contractId, ContractsContractIdBody body) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdPatchWithHttpInfo(contractId, body);
        return resp.getData();
    }

    /**
     * Update unilateral fields in a contract
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdPatchWithHttpInfo(String contractId, ContractsContractIdBody body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdPatchValidateBeforeCall(contractId, body, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update unilateral fields in a contract (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdPatchAsync(String contractId, ContractsContractIdBody body, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdPatchValidateBeforeCall(contractId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdRatehistoryGet
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRatehistoryGetCall(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/ratehistory"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdRatehistoryGetValidateBeforeCall(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdRatehistoryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdRatehistoryGetCall(contractId, since, before, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return an ordered history of effective rate changes.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @return Rates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rates ledgerContractsContractIdRatehistoryGet(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size) throws ApiException {
        ApiResponse<Rates> resp = ledgerContractsContractIdRatehistoryGetWithHttpInfo(contractId, since, before, size);
        return resp.getData();
    }

    /**
     * Return an ordered history of effective rate changes.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @return ApiResponse&lt;Rates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rates> ledgerContractsContractIdRatehistoryGetWithHttpInfo(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdRatehistoryGetValidateBeforeCall(contractId, since, before, size, null, null);
        Type localVarReturnType = new TypeToken<Rates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return an ordered history of effective rate changes. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of effective rates to be returned. Can be used to facilitate paging (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRatehistoryGetAsync(String contractId, OffsetDateTime since, OffsetDateTime before, Integer size, final ApiCallback<Rates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdRatehistoryGetValidateBeforeCall(contractId, since, before, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdSplitContractSplitIdApprovePost
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a proposed contract split (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdSplitContractSplitIdApprovePostCall(List<ContractSplitLotAppoval> body, String contractId, String contractSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/split/{contractSplitId}/approve"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "contractSplitId" + "\\}", apiClient.escapeString(contractSplitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdSplitContractSplitIdApprovePostValidateBeforeCall(List<ContractSplitLotAppoval> body, String contractId, String contractSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdSplitContractSplitIdApprovePost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdSplitContractSplitIdApprovePost(Async)");
        }
        // verify the required parameter 'contractSplitId' is set
        if (contractSplitId == null) {
            throw new ApiException("Missing the required parameter 'contractSplitId' when calling ledgerContractsContractIdSplitContractSplitIdApprovePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitContractSplitIdApprovePostCall(body, contractId, contractSplitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve a contract split in \&quot;proposed\&quot; state.
     * 
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a proposed contract split (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdSplitContractSplitIdApprovePost(List<ContractSplitLotAppoval> body, String contractId, String contractSplitId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdSplitContractSplitIdApprovePostWithHttpInfo(body, contractId, contractSplitId);
        return resp.getData();
    }

    /**
     * Approve a contract split in \&quot;proposed\&quot; state.
     * 
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a proposed contract split (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdSplitContractSplitIdApprovePostWithHttpInfo(List<ContractSplitLotAppoval> body, String contractId, String contractSplitId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitContractSplitIdApprovePostValidateBeforeCall(body, contractId, contractSplitId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve a contract split in \&quot;proposed\&quot; state. (asynchronously)
     * 
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a proposed contract split (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdSplitContractSplitIdApprovePostAsync(List<ContractSplitLotAppoval> body, String contractId, String contractSplitId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitContractSplitIdApprovePostValidateBeforeCall(body, contractId, contractSplitId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdSplitContractSplitIdGet
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a contract split (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdSplitContractSplitIdGetCall(String contractId, String contractSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/split/{contractSplitId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "contractSplitId" + "\\}", apiClient.escapeString(contractSplitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdSplitContractSplitIdGetValidateBeforeCall(String contractId, String contractSplitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdSplitContractSplitIdGet(Async)");
        }
        // verify the required parameter 'contractSplitId' is set
        if (contractSplitId == null) {
            throw new ApiException("Missing the required parameter 'contractSplitId' when calling ledgerContractsContractIdSplitContractSplitIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitContractSplitIdGetCall(contractId, contractSplitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a contract split.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a contract split (required)
     * @return ContractSplit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContractSplit ledgerContractsContractIdSplitContractSplitIdGet(String contractId, String contractSplitId) throws ApiException {
        ApiResponse<ContractSplit> resp = ledgerContractsContractIdSplitContractSplitIdGetWithHttpInfo(contractId, contractSplitId);
        return resp.getData();
    }

    /**
     * Retrieve a contract split.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a contract split (required)
     * @return ApiResponse&lt;ContractSplit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContractSplit> ledgerContractsContractIdSplitContractSplitIdGetWithHttpInfo(String contractId, String contractSplitId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitContractSplitIdGetValidateBeforeCall(contractId, contractSplitId, null, null);
        Type localVarReturnType = new TypeToken<ContractSplit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a contract split. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param contractSplitId The unique identifier of a contract split (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdSplitContractSplitIdGetAsync(String contractId, String contractSplitId, final ApiCallback<ContractSplit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitContractSplitIdGetValidateBeforeCall(contractId, contractSplitId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContractSplit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdSplitPost
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdSplitPostCall(List<ContractSplitLot> body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/split"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdSplitPostValidateBeforeCall(List<ContractSplitLot> body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdSplitPost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdSplitPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitPostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Split an open contract into multiple lots
     * 
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdSplitPost(List<ContractSplitLot> body, String contractId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdSplitPostWithHttpInfo(body, contractId);
        return resp.getData();
    }

    /**
     * Split an open contract into multiple lots
     * 
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdSplitPostWithHttpInfo(List<ContractSplitLot> body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitPostValidateBeforeCall(body, contractId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split an open contract into multiple lots (asynchronously)
     * 
     * @param body Split proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdSplitPostAsync(List<ContractSplitLot> body, String contractId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdSplitPostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsGet
     * @param since Contracts created (since) timestamp UTC (optional)
     * @param before Contracts created (before) timestamp UTC (optional)
     * @param size Number of contracts to be returned. Can be used to facilitate paging (optional)
     * @param contractStatus Contracts with status matching CONTRACT STATUS (optional)
     * @param figi Contracts with instrument matching FIGI (optional)
     * @param sedol Contracts with instrument matching SEDOL (optional)
     * @param cusip Contracts with instrument matching CUSIP (optional)
     * @param ticker Contracts with instrument matching TICKER (optional)
     * @param isin Contracts with instrument matching ISIN (optional)
     * @param internalRefId Contracts with internalRef matching INTERNAL REF ID (optional)
     * @param partyId Contracts with a transacting party mathing PARTY ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsGetCall(OffsetDateTime since, OffsetDateTime before, Integer size, ContractStatus contractStatus, String figi, String sedol, String cusip, String ticker, String isin, String internalRefId, String partyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (contractStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contractStatus", contractStatus));
        if (figi != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("figi", figi));
        if (sedol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sedol", sedol));
        if (cusip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cusip", cusip));
        if (ticker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticker", ticker));
        if (isin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isin", isin));
        if (internalRefId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("internalRefId", internalRefId));
        if (partyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partyId", partyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsGetValidateBeforeCall(OffsetDateTime since, OffsetDateTime before, Integer size, ContractStatus contractStatus, String figi, String sedol, String cusip, String ticker, String isin, String internalRefId, String partyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerContractsGetCall(since, before, size, contractStatus, figi, sedol, cusip, ticker, isin, internalRefId, partyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a collection of contracts. Defaults to return the last 100 contracts created.
     * 
     * @param since Contracts created (since) timestamp UTC (optional)
     * @param before Contracts created (before) timestamp UTC (optional)
     * @param size Number of contracts to be returned. Can be used to facilitate paging (optional)
     * @param contractStatus Contracts with status matching CONTRACT STATUS (optional)
     * @param figi Contracts with instrument matching FIGI (optional)
     * @param sedol Contracts with instrument matching SEDOL (optional)
     * @param cusip Contracts with instrument matching CUSIP (optional)
     * @param ticker Contracts with instrument matching TICKER (optional)
     * @param isin Contracts with instrument matching ISIN (optional)
     * @param internalRefId Contracts with internalRef matching INTERNAL REF ID (optional)
     * @param partyId Contracts with a transacting party mathing PARTY ID (optional)
     * @return Contracts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contracts ledgerContractsGet(OffsetDateTime since, OffsetDateTime before, Integer size, ContractStatus contractStatus, String figi, String sedol, String cusip, String ticker, String isin, String internalRefId, String partyId) throws ApiException {
        ApiResponse<Contracts> resp = ledgerContractsGetWithHttpInfo(since, before, size, contractStatus, figi, sedol, cusip, ticker, isin, internalRefId, partyId);
        return resp.getData();
    }

    /**
     * Read a collection of contracts. Defaults to return the last 100 contracts created.
     * 
     * @param since Contracts created (since) timestamp UTC (optional)
     * @param before Contracts created (before) timestamp UTC (optional)
     * @param size Number of contracts to be returned. Can be used to facilitate paging (optional)
     * @param contractStatus Contracts with status matching CONTRACT STATUS (optional)
     * @param figi Contracts with instrument matching FIGI (optional)
     * @param sedol Contracts with instrument matching SEDOL (optional)
     * @param cusip Contracts with instrument matching CUSIP (optional)
     * @param ticker Contracts with instrument matching TICKER (optional)
     * @param isin Contracts with instrument matching ISIN (optional)
     * @param internalRefId Contracts with internalRef matching INTERNAL REF ID (optional)
     * @param partyId Contracts with a transacting party mathing PARTY ID (optional)
     * @return ApiResponse&lt;Contracts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contracts> ledgerContractsGetWithHttpInfo(OffsetDateTime since, OffsetDateTime before, Integer size, ContractStatus contractStatus, String figi, String sedol, String cusip, String ticker, String isin, String internalRefId, String partyId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsGetValidateBeforeCall(since, before, size, contractStatus, figi, sedol, cusip, ticker, isin, internalRefId, partyId, null, null);
        Type localVarReturnType = new TypeToken<Contracts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a collection of contracts. Defaults to return the last 100 contracts created. (asynchronously)
     * 
     * @param since Contracts created (since) timestamp UTC (optional)
     * @param before Contracts created (before) timestamp UTC (optional)
     * @param size Number of contracts to be returned. Can be used to facilitate paging (optional)
     * @param contractStatus Contracts with status matching CONTRACT STATUS (optional)
     * @param figi Contracts with instrument matching FIGI (optional)
     * @param sedol Contracts with instrument matching SEDOL (optional)
     * @param cusip Contracts with instrument matching CUSIP (optional)
     * @param ticker Contracts with instrument matching TICKER (optional)
     * @param isin Contracts with instrument matching ISIN (optional)
     * @param internalRefId Contracts with internalRef matching INTERNAL REF ID (optional)
     * @param partyId Contracts with a transacting party mathing PARTY ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsGetAsync(OffsetDateTime since, OffsetDateTime before, Integer size, ContractStatus contractStatus, String figi, String sedol, String cusip, String ticker, String isin, String internalRefId, String partyId, final ApiCallback<Contracts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsGetValidateBeforeCall(since, before, size, contractStatus, figi, sedol, cusip, ticker, isin, internalRefId, partyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contracts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsPost
     * @param body New contract proposed for inclusion in the ledger (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsPostCall(ContractProposal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsPostValidateBeforeCall(ContractProposal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a contract in \&quot;proposal\&quot; state. Normally done by the Lend side
     * 
     * @param body New contract proposed for inclusion in the ledger (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsPost(ContractProposal body) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a contract in \&quot;proposal\&quot; state. Normally done by the Lend side
     * 
     * @param body New contract proposed for inclusion in the ledger (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsPostWithHttpInfo(ContractProposal body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a contract in \&quot;proposal\&quot; state. Normally done by the Lend side (asynchronously)
     * 
     * @param body New contract proposed for inclusion in the ledger (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsPostAsync(ContractProposal body, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
