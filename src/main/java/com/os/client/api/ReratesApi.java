/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.os.client.model.LedgerResponse;
import java.time.OffsetDateTime;
import com.os.client.model.Rerate;
import com.os.client.model.RerateProposal;
import com.os.client.model.RerateStatus;
import com.os.client.model.Rerates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReratesApi {
    private ApiClient apiClient;

    public ReratesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReratesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ledgerContractsContractIdReratesGet
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesGetCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesGetValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesGetCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of rerates against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return Rerates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerates ledgerContractsContractIdReratesGet(String contractId) throws ApiException {
        ApiResponse<Rerates> resp = ledgerContractsContractIdReratesGetWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Read collection of rerates against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Rerates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerates> ledgerContractsContractIdReratesGetWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesGetValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of rerates against contract specified by &#x27;contractId&#x27; (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesGetAsync(String contractId, final ApiCallback<Rerates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesGetValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReratesPost
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesPostCall(RerateProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesPostValidateBeforeCall(RerateProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdReratesPost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesPostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a rerate.
     * 
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdReratesPost(RerateProposal body, String contractId) throws ApiException {
        ledgerContractsContractIdReratesPostWithHttpInfo(body, contractId);
    }

    /**
     * Create a rerate.
     * 
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdReratesPostWithHttpInfo(RerateProposal body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesPostValidateBeforeCall(body, contractId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a rerate. (asynchronously)
     * 
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesPostAsync(RerateProposal body, String contractId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesPostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReratesRerateIdApprovePost
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdApprovePostCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates/{rerateId}/approve"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdApprovePostValidateBeforeCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesRerateIdApprovePost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerContractsContractIdReratesRerateIdApprovePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdApprovePostCall(contractId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve a rerate in \&quot;proposed\&quot; state.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReratesRerateIdApprovePost(String contractId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReratesRerateIdApprovePostWithHttpInfo(contractId, rerateId);
        return resp.getData();
    }

    /**
     * Approve a rerate in \&quot;proposed\&quot; state.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReratesRerateIdApprovePostWithHttpInfo(String contractId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdApprovePostValidateBeforeCall(contractId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve a rerate in \&quot;proposed\&quot; state. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdApprovePostAsync(String contractId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdApprovePostValidateBeforeCall(contractId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReratesRerateIdCancelPost
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdCancelPostCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates/{rerateId}/cancel"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdCancelPostValidateBeforeCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesRerateIdCancelPost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerContractsContractIdReratesRerateIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdCancelPostCall(contractId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a rerate in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReratesRerateIdCancelPost(String contractId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReratesRerateIdCancelPostWithHttpInfo(contractId, rerateId);
        return resp.getData();
    }

    /**
     * Cancel a rerate in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReratesRerateIdCancelPostWithHttpInfo(String contractId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdCancelPostValidateBeforeCall(contractId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a rerate in \&quot;proposed\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdCancelPostAsync(String contractId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdCancelPostValidateBeforeCall(contractId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReratesRerateIdCancelpendingPost
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdCancelpendingPostCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates/{rerateId}/cancelpending"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdCancelpendingPostValidateBeforeCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesRerateIdCancelpendingPost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerContractsContractIdReratesRerateIdCancelpendingPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdCancelpendingPostCall(contractId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReratesRerateIdCancelpendingPost(String contractId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReratesRerateIdCancelpendingPostWithHttpInfo(contractId, rerateId);
        return resp.getData();
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReratesRerateIdCancelpendingPostWithHttpInfo(String contractId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdCancelpendingPostValidateBeforeCall(contractId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdCancelpendingPostAsync(String contractId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdCancelpendingPostValidateBeforeCall(contractId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReratesRerateIdDeclinePost
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdDeclinePostCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates/{rerateId}/decline"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdDeclinePostValidateBeforeCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesRerateIdDeclinePost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerContractsContractIdReratesRerateIdDeclinePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdDeclinePostCall(contractId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Decline a rerate in \&quot;proposed\&quot; state.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReratesRerateIdDeclinePost(String contractId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReratesRerateIdDeclinePostWithHttpInfo(contractId, rerateId);
        return resp.getData();
    }

    /**
     * Decline a rerate in \&quot;proposed\&quot; state.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReratesRerateIdDeclinePostWithHttpInfo(String contractId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdDeclinePostValidateBeforeCall(contractId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decline a rerate in \&quot;proposed\&quot; state. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdDeclinePostAsync(String contractId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdDeclinePostValidateBeforeCall(contractId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReratesRerateIdGet
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdGetCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates/{rerateId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdGetValidateBeforeCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesRerateIdGet(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerContractsContractIdReratesRerateIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdGetCall(contractId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a rerate
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return Rerate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerate ledgerContractsContractIdReratesRerateIdGet(String contractId, String rerateId) throws ApiException {
        ApiResponse<Rerate> resp = ledgerContractsContractIdReratesRerateIdGetWithHttpInfo(contractId, rerateId);
        return resp.getData();
    }

    /**
     * Read a rerate
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;Rerate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerate> ledgerContractsContractIdReratesRerateIdGetWithHttpInfo(String contractId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdGetValidateBeforeCall(contractId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a rerate (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdGetAsync(String contractId, String rerateId, final ApiCallback<Rerate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdGetValidateBeforeCall(contractId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReratesRerateIdVenuecancelpendingPost
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/rerates/{rerateId}/venuecancelpending"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostValidateBeforeCall(String contractId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReratesRerateIdVenuecancelpendingPost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerContractsContractIdReratesRerateIdVenuecancelpendingPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostCall(contractId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReratesRerateIdVenuecancelpendingPost(String contractId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostWithHttpInfo(contractId, rerateId);
        return resp.getData();
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostWithHttpInfo(String contractId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostValidateBeforeCall(contractId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostAsync(String contractId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReratesRerateIdVenuecancelpendingPostValidateBeforeCall(contractId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdVenuereratesPost
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdVenuereratesPostCall(RerateProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/venuererates"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdVenuereratesPostValidateBeforeCall(RerateProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdVenuereratesPost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdVenuereratesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuereratesPostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * For delegated venues to create a rerate atomically.
     * 
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdVenuereratesPost(RerateProposal body, String contractId) throws ApiException {
        ledgerContractsContractIdVenuereratesPostWithHttpInfo(body, contractId);
    }

    /**
     * For delegated venues to create a rerate atomically.
     * 
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdVenuereratesPostWithHttpInfo(RerateProposal body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuereratesPostValidateBeforeCall(body, contractId, null, null);
        return apiClient.execute(call);
    }

    /**
     * For delegated venues to create a rerate atomically. (asynchronously)
     * 
     * @param body New rerate proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdVenuereratesPostAsync(RerateProposal body, String contractId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuereratesPostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerReratesGet
     * @param since Rerates created (since) timestamp UTC (optional)
     * @param before Rerates created (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Contracts matching status RERATE STATUS (optional)
     * @param figi Rerates with instrument matching FIGI (optional)
     * @param sedol Rerates with instrument matching SEDOL (optional)
     * @param cusip Rerates with instrument matching CUSIP (optional)
     * @param ticker Rerates with instrument matching TICKER (optional)
     * @param isin Rerates with instrument matching ISIN (optional)
     * @param partyId Rerates with a transacting party mathing PARTY ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesGetCall(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, String figi, String sedol, String cusip, String ticker, String isin, String partyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/rerates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (rerateStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rerateStatus", rerateStatus));
        if (figi != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("figi", figi));
        if (sedol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sedol", sedol));
        if (cusip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cusip", cusip));
        if (ticker != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticker", ticker));
        if (isin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isin", isin));
        if (partyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partyId", partyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReratesGetValidateBeforeCall(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, String figi, String sedol, String cusip, String ticker, String isin, String partyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerReratesGetCall(since, before, size, rerateStatus, figi, sedol, cusip, ticker, isin, partyId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of rerates
     * 
     * @param since Rerates created (since) timestamp UTC (optional)
     * @param before Rerates created (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Contracts matching status RERATE STATUS (optional)
     * @param figi Rerates with instrument matching FIGI (optional)
     * @param sedol Rerates with instrument matching SEDOL (optional)
     * @param cusip Rerates with instrument matching CUSIP (optional)
     * @param ticker Rerates with instrument matching TICKER (optional)
     * @param isin Rerates with instrument matching ISIN (optional)
     * @param partyId Rerates with a transacting party mathing PARTY ID (optional)
     * @return Rerates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerates ledgerReratesGet(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, String figi, String sedol, String cusip, String ticker, String isin, String partyId) throws ApiException {
        ApiResponse<Rerates> resp = ledgerReratesGetWithHttpInfo(since, before, size, rerateStatus, figi, sedol, cusip, ticker, isin, partyId);
        return resp.getData();
    }

    /**
     * Read collection of rerates
     * 
     * @param since Rerates created (since) timestamp UTC (optional)
     * @param before Rerates created (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Contracts matching status RERATE STATUS (optional)
     * @param figi Rerates with instrument matching FIGI (optional)
     * @param sedol Rerates with instrument matching SEDOL (optional)
     * @param cusip Rerates with instrument matching CUSIP (optional)
     * @param ticker Rerates with instrument matching TICKER (optional)
     * @param isin Rerates with instrument matching ISIN (optional)
     * @param partyId Rerates with a transacting party mathing PARTY ID (optional)
     * @return ApiResponse&lt;Rerates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerates> ledgerReratesGetWithHttpInfo(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, String figi, String sedol, String cusip, String ticker, String isin, String partyId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerReratesGetValidateBeforeCall(since, before, size, rerateStatus, figi, sedol, cusip, ticker, isin, partyId, null, null);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of rerates (asynchronously)
     * 
     * @param since Rerates created (since) timestamp UTC (optional)
     * @param before Rerates created (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Contracts matching status RERATE STATUS (optional)
     * @param figi Rerates with instrument matching FIGI (optional)
     * @param sedol Rerates with instrument matching SEDOL (optional)
     * @param cusip Rerates with instrument matching CUSIP (optional)
     * @param ticker Rerates with instrument matching TICKER (optional)
     * @param isin Rerates with instrument matching ISIN (optional)
     * @param partyId Rerates with a transacting party mathing PARTY ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesGetAsync(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, String figi, String sedol, String cusip, String ticker, String isin, String partyId, final ApiCallback<Rerates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReratesGetValidateBeforeCall(since, before, size, rerateStatus, figi, sedol, cusip, ticker, isin, partyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerReratesRerateIdGet
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesRerateIdGetCall(String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/rerates/{rerateId}"
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReratesRerateIdGetValidateBeforeCall(String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerReratesRerateIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerReratesRerateIdGetCall(rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a rerate
     * 
     * @param rerateId The unique identifier of a rerate (required)
     * @return Rerate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerate ledgerReratesRerateIdGet(String rerateId) throws ApiException {
        ApiResponse<Rerate> resp = ledgerReratesRerateIdGetWithHttpInfo(rerateId);
        return resp.getData();
    }

    /**
     * Read a rerate
     * 
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;Rerate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerate> ledgerReratesRerateIdGetWithHttpInfo(String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerReratesRerateIdGetValidateBeforeCall(rerateId, null, null);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a rerate (asynchronously)
     * 
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesRerateIdGetAsync(String rerateId, final ApiCallback<Rerate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReratesRerateIdGetValidateBeforeCall(rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
