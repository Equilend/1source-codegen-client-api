/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.1
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;
import com.os.client.model.LedgerResponse;
import com.os.client.model.Rerate;
import com.os.client.model.RerateDeclineErrorResponse;
import com.os.client.model.RerateProposal;
import com.os.client.model.RerateStatus;
import com.os.client.model.Rerates;

public class ReratesApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ReratesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReratesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for ledgerLoansLoanIdReratesGet
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesGetCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/rerates"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReratesGetValidateBeforeCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReratesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesGetCall(loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of rerates against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return Rerates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerates ledgerLoansLoanIdReratesGet(String loanId) throws ApiException {
        ApiResponse<Rerates> resp = ledgerLoansLoanIdReratesGetWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * Read collection of rerates against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;Rerates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerates> ledgerLoansLoanIdReratesGetWithHttpInfo(String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesGetValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of rerates against loan specified by &#x27;loanId&#x27; (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesGetAsync(String loanId, final ApiCallback<Rerates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesGetValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReratesPost
     * @param body New rerate proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesPostCall(RerateProposal body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/rerates"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReratesPostValidateBeforeCall(RerateProposal body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdReratesPost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReratesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesPostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a rerate.
     * 
     * @param body New rerate proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerLoansLoanIdReratesPost(RerateProposal body, String loanId) throws ApiException {
        ledgerLoansLoanIdReratesPostWithHttpInfo(body, loanId);
    }

    /**
     * Create a rerate.
     * 
     * @param body New rerate proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerLoansLoanIdReratesPostWithHttpInfo(RerateProposal body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesPostValidateBeforeCall(body, loanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a rerate. (asynchronously)
     * 
     * @param body New rerate proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesPostAsync(RerateProposal body, String loanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesPostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReratesRerateIdApprovePost
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdApprovePostCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/rerates/{rerateId}/approve"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdApprovePostValidateBeforeCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReratesRerateIdApprovePost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerLoansLoanIdReratesRerateIdApprovePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdApprovePostCall(loanId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Approve a rerate in \&quot;proposed\&quot; state.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdReratesRerateIdApprovePost(String loanId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdReratesRerateIdApprovePostWithHttpInfo(loanId, rerateId);
        return resp.getData();
    }

    /**
     * Approve a rerate in \&quot;proposed\&quot; state.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdReratesRerateIdApprovePostWithHttpInfo(String loanId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdApprovePostValidateBeforeCall(loanId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Approve a rerate in \&quot;proposed\&quot; state. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdApprovePostAsync(String loanId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdApprovePostValidateBeforeCall(loanId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReratesRerateIdCancelPost
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdCancelPostCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/rerates/{rerateId}/cancel"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdCancelPostValidateBeforeCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReratesRerateIdCancelPost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerLoansLoanIdReratesRerateIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdCancelPostCall(loanId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a rerate in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdReratesRerateIdCancelPost(String loanId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdReratesRerateIdCancelPostWithHttpInfo(loanId, rerateId);
        return resp.getData();
    }

    /**
     * Cancel a rerate in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdReratesRerateIdCancelPostWithHttpInfo(String loanId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdCancelPostValidateBeforeCall(loanId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a rerate in \&quot;proposed\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdCancelPostAsync(String loanId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdCancelPostValidateBeforeCall(loanId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReratesRerateIdCancelpendingPost
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdCancelpendingPostCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/rerates/{rerateId}/cancelpending"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdCancelpendingPostValidateBeforeCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReratesRerateIdCancelpendingPost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerLoansLoanIdReratesRerateIdCancelpendingPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdCancelpendingPostCall(loanId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdReratesRerateIdCancelpendingPost(String loanId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdReratesRerateIdCancelpendingPostWithHttpInfo(loanId, rerateId);
        return resp.getData();
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdReratesRerateIdCancelpendingPostWithHttpInfo(String loanId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdCancelpendingPostValidateBeforeCall(loanId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a rerate in \&quot;pending\&quot; state. Either party can initiate. If canceled by a delegated Venue, the cancel will be done unilaterally (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdCancelpendingPostAsync(String loanId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdCancelpendingPostValidateBeforeCall(loanId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReratesRerateIdDeclinePost
     * @param body Provide reason and details for declining rerate proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdDeclinePostCall(RerateDeclineErrorResponse body, String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/rerates/{rerateId}/decline"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdDeclinePostValidateBeforeCall(RerateDeclineErrorResponse body, String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdReratesRerateIdDeclinePost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReratesRerateIdDeclinePost(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerLoansLoanIdReratesRerateIdDeclinePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdDeclinePostCall(body, loanId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Decline a rerate in \&quot;proposed\&quot; state.
     * 
     * @param body Provide reason and details for declining rerate proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdReratesRerateIdDeclinePost(RerateDeclineErrorResponse body, String loanId, String rerateId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdReratesRerateIdDeclinePostWithHttpInfo(body, loanId, rerateId);
        return resp.getData();
    }

    /**
     * Decline a rerate in \&quot;proposed\&quot; state.
     * 
     * @param body Provide reason and details for declining rerate proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdReratesRerateIdDeclinePostWithHttpInfo(RerateDeclineErrorResponse body, String loanId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdDeclinePostValidateBeforeCall(body, loanId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decline a rerate in \&quot;proposed\&quot; state. (asynchronously)
     * 
     * @param body Provide reason and details for declining rerate proposal (required)
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdDeclinePostAsync(RerateDeclineErrorResponse body, String loanId, String rerateId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdDeclinePostValidateBeforeCall(body, loanId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReratesRerateIdGet
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdGetCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/rerates/{rerateId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdGetValidateBeforeCall(String loanId, String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReratesRerateIdGet(Async)");
        }
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerLoansLoanIdReratesRerateIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdGetCall(loanId, rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a rerate
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return Rerate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerate ledgerLoansLoanIdReratesRerateIdGet(String loanId, String rerateId) throws ApiException {
        ApiResponse<Rerate> resp = ledgerLoansLoanIdReratesRerateIdGetWithHttpInfo(loanId, rerateId);
        return resp.getData();
    }

    /**
     * Read a rerate
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;Rerate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerate> ledgerLoansLoanIdReratesRerateIdGetWithHttpInfo(String loanId, String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdGetValidateBeforeCall(loanId, rerateId, null, null);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a rerate (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReratesRerateIdGetAsync(String loanId, String rerateId, final ApiCallback<Rerate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReratesRerateIdGetValidateBeforeCall(loanId, rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerReratesGet
     * @param since Rerates updated (since) timestamp UTC (optional)
     * @param before Rerates updated (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Loans matching status RERATE STATUS (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesGetCall(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/rerates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (rerateStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rerateStatus", rerateStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReratesGetValidateBeforeCall(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerReratesGetCall(since, before, size, rerateStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of rerates
     * 
     * @param since Rerates updated (since) timestamp UTC (optional)
     * @param before Rerates updated (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Loans matching status RERATE STATUS (optional)
     * @return Rerates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerates ledgerReratesGet(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus) throws ApiException {
        ApiResponse<Rerates> resp = ledgerReratesGetWithHttpInfo(since, before, size, rerateStatus);
        return resp.getData();
    }

    /**
     * Read collection of rerates
     * 
     * @param since Rerates updated (since) timestamp UTC (optional)
     * @param before Rerates updated (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Loans matching status RERATE STATUS (optional)
     * @return ApiResponse&lt;Rerates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerates> ledgerReratesGetWithHttpInfo(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus) throws ApiException {
        com.squareup.okhttp.Call call = ledgerReratesGetValidateBeforeCall(since, before, size, rerateStatus, null, null);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of rerates (asynchronously)
     * 
     * @param since Rerates updated (since) timestamp UTC (optional)
     * @param before Rerates updated (before) timestamp UTC (optional)
     * @param size Number of rerates to be returned. Can be used to facilitate paging (optional)
     * @param rerateStatus Loans matching status RERATE STATUS (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesGetAsync(OffsetDateTime since, OffsetDateTime before, Integer size, RerateStatus rerateStatus, final ApiCallback<Rerates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReratesGetValidateBeforeCall(since, before, size, rerateStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerReratesRerateIdGet
     * @param rerateId The unique identifier of a rerate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesRerateIdGetCall(String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/rerates/{rerateId}"
            .replaceAll("\\{" + "rerateId" + "\\}", apiClient.escapeString(rerateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReratesRerateIdGetValidateBeforeCall(String rerateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rerateId' is set
        if (rerateId == null) {
            throw new ApiException("Missing the required parameter 'rerateId' when calling ledgerReratesRerateIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerReratesRerateIdGetCall(rerateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a rerate
     * 
     * @param rerateId The unique identifier of a rerate (required)
     * @return Rerate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rerate ledgerReratesRerateIdGet(String rerateId) throws ApiException {
        ApiResponse<Rerate> resp = ledgerReratesRerateIdGetWithHttpInfo(rerateId);
        return resp.getData();
    }

    /**
     * Read a rerate
     * 
     * @param rerateId The unique identifier of a rerate (required)
     * @return ApiResponse&lt;Rerate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rerate> ledgerReratesRerateIdGetWithHttpInfo(String rerateId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerReratesRerateIdGetValidateBeforeCall(rerateId, null, null);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a rerate (asynchronously)
     * 
     * @param rerateId The unique identifier of a rerate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReratesRerateIdGetAsync(String rerateId, final ApiCallback<Rerate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReratesRerateIdGetValidateBeforeCall(rerateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rerate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
