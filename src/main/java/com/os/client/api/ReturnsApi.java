/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.os.client.model.LedgerResponse;
import com.os.client.model.ModelReturn;
import com.os.client.model.ReturnAcknowledgement;
import com.os.client.model.ReturnProposal;
import com.os.client.model.Returns;
import com.os.client.model.ReturnsReturnIdBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReturnsApi {
    private ApiClient apiClient;

    public ReturnsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReturnsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ledgerContractsContractIdReturnsGet
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsGetCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/returns"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReturnsGetValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReturnsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsGetCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of returns against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return Returns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Returns ledgerContractsContractIdReturnsGet(String contractId) throws ApiException {
        ApiResponse<Returns> resp = ledgerContractsContractIdReturnsGetWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Read collection of returns against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Returns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Returns> ledgerContractsContractIdReturnsGetWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsGetValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of returns against contract specified by &#x27;contractId&#x27; (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsGetAsync(String contractId, final ApiCallback<Returns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsGetValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReturnsPost
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsPostCall(ReturnProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/returns"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReturnsPostValidateBeforeCall(ReturnProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdReturnsPost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReturnsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsPostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a return
     * 
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdReturnsPost(ReturnProposal body, String contractId) throws ApiException {
        ledgerContractsContractIdReturnsPostWithHttpInfo(body, contractId);
    }

    /**
     * Create a return
     * 
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdReturnsPostWithHttpInfo(ReturnProposal body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsPostValidateBeforeCall(body, contractId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a return (asynchronously)
     * 
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsPostAsync(ReturnProposal body, String contractId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsPostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReturnsReturnIdAcknowledgePost
     * @param body Acknowledge return with positive/negative intent (required)
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdAcknowledgePostCall(ReturnAcknowledgement body, String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/returns/{returnId}/acknowledge"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdAcknowledgePostValidateBeforeCall(ReturnAcknowledgement body, String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdReturnsReturnIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReturnsReturnIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerContractsContractIdReturnsReturnIdAcknowledgePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdAcknowledgePostCall(body, contractId, returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Acknowledge a pending return. No change to status.
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReturnsReturnIdAcknowledgePost(ReturnAcknowledgement body, String contractId, String returnId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReturnsReturnIdAcknowledgePostWithHttpInfo(body, contractId, returnId);
        return resp.getData();
    }

    /**
     * Acknowledge a pending return. No change to status.
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReturnsReturnIdAcknowledgePostWithHttpInfo(ReturnAcknowledgement body, String contractId, String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdAcknowledgePostValidateBeforeCall(body, contractId, returnId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Acknowledge a pending return. No change to status. (asynchronously)
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdAcknowledgePostAsync(ReturnAcknowledgement body, String contractId, String returnId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdAcknowledgePostValidateBeforeCall(body, contractId, returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReturnsReturnIdCancelPost
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdCancelPostCall(String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/returns/{returnId}/cancel"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdCancelPostValidateBeforeCall(String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReturnsReturnIdCancelPost(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerContractsContractIdReturnsReturnIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdCancelPostCall(contractId, returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReturnsReturnIdCancelPost(String contractId, String returnId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReturnsReturnIdCancelPostWithHttpInfo(contractId, returnId);
        return resp.getData();
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReturnsReturnIdCancelPostWithHttpInfo(String contractId, String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdCancelPostValidateBeforeCall(contractId, returnId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdCancelPostAsync(String contractId, String returnId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdCancelPostValidateBeforeCall(contractId, returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReturnsReturnIdGet
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdGetCall(String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/returns/{returnId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdGetValidateBeforeCall(String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReturnsReturnIdGet(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerContractsContractIdReturnsReturnIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdGetCall(contractId, returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a return
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelReturn ledgerContractsContractIdReturnsReturnIdGet(String contractId, String returnId) throws ApiException {
        ApiResponse<ModelReturn> resp = ledgerContractsContractIdReturnsReturnIdGetWithHttpInfo(contractId, returnId);
        return resp.getData();
    }

    /**
     * Read a return
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelReturn> ledgerContractsContractIdReturnsReturnIdGetWithHttpInfo(String contractId, String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdGetValidateBeforeCall(contractId, returnId, null, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a return (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdGetAsync(String contractId, String returnId, final ApiCallback<ModelReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdGetValidateBeforeCall(contractId, returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReturnsReturnIdPatch
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdPatchCall(String contractId, String returnId, ReturnsReturnIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/returns/{returnId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdPatchValidateBeforeCall(String contractId, String returnId, ReturnsReturnIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReturnsReturnIdPatch(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerContractsContractIdReturnsReturnIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdPatchCall(contractId, returnId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update unilateral fields on a return
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReturnsReturnIdPatch(String contractId, String returnId, ReturnsReturnIdBody body) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReturnsReturnIdPatchWithHttpInfo(contractId, returnId, body);
        return resp.getData();
    }

    /**
     * Update unilateral fields on a return
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReturnsReturnIdPatchWithHttpInfo(String contractId, String returnId, ReturnsReturnIdBody body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdPatchValidateBeforeCall(contractId, returnId, body, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update unilateral fields on a return (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdPatchAsync(String contractId, String returnId, ReturnsReturnIdBody body, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdPatchValidateBeforeCall(contractId, returnId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdReturnsReturnIdVenuecancelPost
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdVenuecancelPostCall(String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/returns/{returnId}/venuecancel"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdVenuecancelPostValidateBeforeCall(String contractId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdReturnsReturnIdVenuecancelPost(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerContractsContractIdReturnsReturnIdVenuecancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdVenuecancelPostCall(contractId, returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdReturnsReturnIdVenuecancelPost(String contractId, String returnId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdReturnsReturnIdVenuecancelPostWithHttpInfo(contractId, returnId);
        return resp.getData();
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdReturnsReturnIdVenuecancelPostWithHttpInfo(String contractId, String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdVenuecancelPostValidateBeforeCall(contractId, returnId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdReturnsReturnIdVenuecancelPostAsync(String contractId, String returnId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdReturnsReturnIdVenuecancelPostValidateBeforeCall(contractId, returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdVenuereturnsPost
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdVenuereturnsPostCall(ReturnProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/venuereturns"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdVenuereturnsPostValidateBeforeCall(ReturnProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdVenuereturnsPost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdVenuereturnsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuereturnsPostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * For delegated venues to create a return atomically.
     * 
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdVenuereturnsPost(ReturnProposal body, String contractId) throws ApiException {
        ledgerContractsContractIdVenuereturnsPostWithHttpInfo(body, contractId);
    }

    /**
     * For delegated venues to create a return atomically.
     * 
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdVenuereturnsPostWithHttpInfo(ReturnProposal body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuereturnsPostValidateBeforeCall(body, contractId, null, null);
        return apiClient.execute(call);
    }

    /**
     * For delegated venues to create a return atomically. (asynchronously)
     * 
     * @param body New return proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdVenuereturnsPostAsync(ReturnProposal body, String contractId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuereturnsPostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerReturnsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReturnsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerReturnsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of returns
     * 
     * @return Returns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Returns ledgerReturnsGet() throws ApiException {
        ApiResponse<Returns> resp = ledgerReturnsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Read collection of returns
     * 
     * @return ApiResponse&lt;Returns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Returns> ledgerReturnsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = ledgerReturnsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of returns (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsGetAsync(final ApiCallback<Returns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReturnsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerReturnsReturnIdGet
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsReturnIdGetCall(String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/returns/{returnId}"
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReturnsReturnIdGetValidateBeforeCall(String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerReturnsReturnIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerReturnsReturnIdGetCall(returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a return
     * 
     * @param returnId The unique identifier of a return (required)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelReturn ledgerReturnsReturnIdGet(String returnId) throws ApiException {
        ApiResponse<ModelReturn> resp = ledgerReturnsReturnIdGetWithHttpInfo(returnId);
        return resp.getData();
    }

    /**
     * Read a return
     * 
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelReturn> ledgerReturnsReturnIdGetWithHttpInfo(String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerReturnsReturnIdGetValidateBeforeCall(returnId, null, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a return (asynchronously)
     * 
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsReturnIdGetAsync(String returnId, final ApiCallback<ModelReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReturnsReturnIdGetValidateBeforeCall(returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
