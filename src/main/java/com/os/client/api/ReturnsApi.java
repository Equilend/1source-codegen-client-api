/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.1
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;
import com.os.client.model.LedgerResponse;
import com.os.client.model.ModelReturn;
import com.os.client.model.ReturnAcknowledgement;
import com.os.client.model.ReturnProposal;
import com.os.client.model.ReturnStatus;
import com.os.client.model.Returns;
import com.os.client.model.ReturnsReturnIdBody;

public class ReturnsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ReturnsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReturnsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for ledgerLoansLoanIdReturnsGet
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsGetCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/returns"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReturnsGetValidateBeforeCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReturnsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsGetCall(loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of returns against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return Returns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Returns ledgerLoansLoanIdReturnsGet(String loanId) throws ApiException {
        ApiResponse<Returns> resp = ledgerLoansLoanIdReturnsGetWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * Read collection of returns against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;Returns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Returns> ledgerLoansLoanIdReturnsGetWithHttpInfo(String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsGetValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of returns against loan specified by &#x27;loanId&#x27; (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsGetAsync(String loanId, final ApiCallback<Returns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsGetValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReturnsPost
     * @param body New return proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsPostCall(ReturnProposal body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/returns"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReturnsPostValidateBeforeCall(ReturnProposal body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdReturnsPost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReturnsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsPostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a return
     * 
     * @param body New return proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerLoansLoanIdReturnsPost(ReturnProposal body, String loanId) throws ApiException {
        ledgerLoansLoanIdReturnsPostWithHttpInfo(body, loanId);
    }

    /**
     * Create a return
     * 
     * @param body New return proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerLoansLoanIdReturnsPostWithHttpInfo(ReturnProposal body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsPostValidateBeforeCall(body, loanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a return (asynchronously)
     * 
     * @param body New return proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsPostAsync(ReturnProposal body, String loanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsPostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReturnsReturnIdAcknowledgePost
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdAcknowledgePostCall(ReturnAcknowledgement body, String loanId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/returns/{returnId}/acknowledge"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdAcknowledgePostValidateBeforeCall(ReturnAcknowledgement body, String loanId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdReturnsReturnIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReturnsReturnIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerLoansLoanIdReturnsReturnIdAcknowledgePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdAcknowledgePostCall(body, loanId, returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Acknowledge a pending return. No change to status.
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdReturnsReturnIdAcknowledgePost(ReturnAcknowledgement body, String loanId, String returnId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdReturnsReturnIdAcknowledgePostWithHttpInfo(body, loanId, returnId);
        return resp.getData();
    }

    /**
     * Acknowledge a pending return. No change to status.
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdReturnsReturnIdAcknowledgePostWithHttpInfo(ReturnAcknowledgement body, String loanId, String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdAcknowledgePostValidateBeforeCall(body, loanId, returnId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Acknowledge a pending return. No change to status. (asynchronously)
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdAcknowledgePostAsync(ReturnAcknowledgement body, String loanId, String returnId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdAcknowledgePostValidateBeforeCall(body, loanId, returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReturnsReturnIdCancelPost
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdCancelPostCall(String loanId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/returns/{returnId}/cancel"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdCancelPostValidateBeforeCall(String loanId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReturnsReturnIdCancelPost(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerLoansLoanIdReturnsReturnIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdCancelPostCall(loanId, returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdReturnsReturnIdCancelPost(String loanId, String returnId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdReturnsReturnIdCancelPostWithHttpInfo(loanId, returnId);
        return resp.getData();
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdReturnsReturnIdCancelPostWithHttpInfo(String loanId, String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdCancelPostValidateBeforeCall(loanId, returnId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a return in \&quot;proposed\&quot; or \&quot;pending\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdCancelPostAsync(String loanId, String returnId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdCancelPostValidateBeforeCall(loanId, returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReturnsReturnIdGet
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdGetCall(String loanId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/returns/{returnId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdGetValidateBeforeCall(String loanId, String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReturnsReturnIdGet(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerLoansLoanIdReturnsReturnIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdGetCall(loanId, returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a return
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelReturn ledgerLoansLoanIdReturnsReturnIdGet(String loanId, String returnId) throws ApiException {
        ApiResponse<ModelReturn> resp = ledgerLoansLoanIdReturnsReturnIdGetWithHttpInfo(loanId, returnId);
        return resp.getData();
    }

    /**
     * Read a return
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelReturn> ledgerLoansLoanIdReturnsReturnIdGetWithHttpInfo(String loanId, String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdGetValidateBeforeCall(loanId, returnId, null, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a return (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdGetAsync(String loanId, String returnId, final ApiCallback<ModelReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdGetValidateBeforeCall(loanId, returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdReturnsReturnIdPatch
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdPatchCall(String loanId, String returnId, ReturnsReturnIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/returns/{returnId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdPatchValidateBeforeCall(String loanId, String returnId, ReturnsReturnIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdReturnsReturnIdPatch(Async)");
        }
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerLoansLoanIdReturnsReturnIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdPatchCall(loanId, returnId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update unilateral fields on a return
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdReturnsReturnIdPatch(String loanId, String returnId, ReturnsReturnIdBody body) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdReturnsReturnIdPatchWithHttpInfo(loanId, returnId, body);
        return resp.getData();
    }

    /**
     * Update unilateral fields on a return
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdReturnsReturnIdPatchWithHttpInfo(String loanId, String returnId, ReturnsReturnIdBody body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdPatchValidateBeforeCall(loanId, returnId, body, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update unilateral fields on a return (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param returnId The unique identifier of a return (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdReturnsReturnIdPatchAsync(String loanId, String returnId, ReturnsReturnIdBody body, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdReturnsReturnIdPatchValidateBeforeCall(loanId, returnId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerReturnsGet
     * @param since Returns updated (since) timestamp UTC (optional)
     * @param before Returns updated (before) timestamp UTC (optional)
     * @param size Number of returns to be returned. Can be used to facilitate paging (optional)
     * @param returnStatus Returns matching status RETURN STATUS (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsGetCall(OffsetDateTime since, OffsetDateTime before, Integer size, ReturnStatus returnStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (returnStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnStatus", returnStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReturnsGetValidateBeforeCall(OffsetDateTime since, OffsetDateTime before, Integer size, ReturnStatus returnStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerReturnsGetCall(since, before, size, returnStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of returns
     * 
     * @param since Returns updated (since) timestamp UTC (optional)
     * @param before Returns updated (before) timestamp UTC (optional)
     * @param size Number of returns to be returned. Can be used to facilitate paging (optional)
     * @param returnStatus Returns matching status RETURN STATUS (optional)
     * @return Returns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Returns ledgerReturnsGet(OffsetDateTime since, OffsetDateTime before, Integer size, ReturnStatus returnStatus) throws ApiException {
        ApiResponse<Returns> resp = ledgerReturnsGetWithHttpInfo(since, before, size, returnStatus);
        return resp.getData();
    }

    /**
     * Read collection of returns
     * 
     * @param since Returns updated (since) timestamp UTC (optional)
     * @param before Returns updated (before) timestamp UTC (optional)
     * @param size Number of returns to be returned. Can be used to facilitate paging (optional)
     * @param returnStatus Returns matching status RETURN STATUS (optional)
     * @return ApiResponse&lt;Returns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Returns> ledgerReturnsGetWithHttpInfo(OffsetDateTime since, OffsetDateTime before, Integer size, ReturnStatus returnStatus) throws ApiException {
        com.squareup.okhttp.Call call = ledgerReturnsGetValidateBeforeCall(since, before, size, returnStatus, null, null);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of returns (asynchronously)
     * 
     * @param since Returns updated (since) timestamp UTC (optional)
     * @param before Returns updated (before) timestamp UTC (optional)
     * @param size Number of returns to be returned. Can be used to facilitate paging (optional)
     * @param returnStatus Returns matching status RETURN STATUS (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsGetAsync(OffsetDateTime since, OffsetDateTime before, Integer size, ReturnStatus returnStatus, final ApiCallback<Returns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReturnsGetValidateBeforeCall(since, before, size, returnStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Returns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerReturnsReturnIdGet
     * @param returnId The unique identifier of a return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsReturnIdGetCall(String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/returns/{returnId}"
            .replaceAll("\\{" + "returnId" + "\\}", apiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerReturnsReturnIdGetValidateBeforeCall(String returnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling ledgerReturnsReturnIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerReturnsReturnIdGetCall(returnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a return
     * 
     * @param returnId The unique identifier of a return (required)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelReturn ledgerReturnsReturnIdGet(String returnId) throws ApiException {
        ApiResponse<ModelReturn> resp = ledgerReturnsReturnIdGetWithHttpInfo(returnId);
        return resp.getData();
    }

    /**
     * Read a return
     * 
     * @param returnId The unique identifier of a return (required)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelReturn> ledgerReturnsReturnIdGetWithHttpInfo(String returnId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerReturnsReturnIdGetValidateBeforeCall(returnId, null, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a return (asynchronously)
     * 
     * @param returnId The unique identifier of a return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerReturnsReturnIdGetAsync(String returnId, final ApiCallback<ModelReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerReturnsReturnIdGetValidateBeforeCall(returnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
