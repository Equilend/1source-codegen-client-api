/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.os.client.model.LedgerResponse;
import com.os.client.model.Recall;
import com.os.client.model.RecallProposal;
import com.os.client.model.Recalls;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecallsApi {
    private ApiClient apiClient;

    public RecallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecallsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ledgerContractsContractIdRecallsGet
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsGetCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/recalls"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdRecallsGetValidateBeforeCall(String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdRecallsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsGetCall(contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of recalls against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return Recalls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recalls ledgerContractsContractIdRecallsGet(String contractId) throws ApiException {
        ApiResponse<Recalls> resp = ledgerContractsContractIdRecallsGetWithHttpInfo(contractId);
        return resp.getData();
    }

    /**
     * Read collection of recalls against contract specified by &#x27;contractId&#x27;
     * 
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Recalls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recalls> ledgerContractsContractIdRecallsGetWithHttpInfo(String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsGetValidateBeforeCall(contractId, null, null);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of recalls against contract specified by &#x27;contractId&#x27; (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsGetAsync(String contractId, final ApiCallback<Recalls> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsGetValidateBeforeCall(contractId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdRecallsPost
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsPostCall(RecallProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/recalls"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdRecallsPostValidateBeforeCall(RecallProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdRecallsPost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdRecallsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsPostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Initiates a recall
     * Initiates a recall notice to return securities on a contract.  ### Validation rules:   - Caller must be the lender on the contract   - &#x60;contractId&#x60; -- must reference an &#x60;OPEN&#x60; contract   - &#x60;executionVenue&#x60;     - is mandatory     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;ONPLATFORM&#x60; then all other elements in &#x60;executionVenue&#x60; must be null     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;OFFPLATFORM&#x60; then &#x60;executionVenue.partyId&#x60;, &#x60;executionVenue.venueName&#x60;, and &#x60;executionVenue.partyRole&#x60; are mandatory   - &#x60;quantity&#x60;     - is mandatory     - must be &lt; 0     - must be &lt;&#x3D; contract open quantity - all existing open recall quantities   - &#x60;recallDate&#x60;     - is mandatory     - must be &gt;&#x3D; current day   - &#x60;recallDueDate&#x60;     - is mandatory     - must be &gt; &#x60;recallDate&#x60; 
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdRecallsPost(RecallProposal body, String contractId) throws ApiException {
        ledgerContractsContractIdRecallsPostWithHttpInfo(body, contractId);
    }

    /**
     * Initiates a recall
     * Initiates a recall notice to return securities on a contract.  ### Validation rules:   - Caller must be the lender on the contract   - &#x60;contractId&#x60; -- must reference an &#x60;OPEN&#x60; contract   - &#x60;executionVenue&#x60;     - is mandatory     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;ONPLATFORM&#x60; then all other elements in &#x60;executionVenue&#x60; must be null     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;OFFPLATFORM&#x60; then &#x60;executionVenue.partyId&#x60;, &#x60;executionVenue.venueName&#x60;, and &#x60;executionVenue.partyRole&#x60; are mandatory   - &#x60;quantity&#x60;     - is mandatory     - must be &lt; 0     - must be &lt;&#x3D; contract open quantity - all existing open recall quantities   - &#x60;recallDate&#x60;     - is mandatory     - must be &gt;&#x3D; current day   - &#x60;recallDueDate&#x60;     - is mandatory     - must be &gt; &#x60;recallDate&#x60; 
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdRecallsPostWithHttpInfo(RecallProposal body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsPostValidateBeforeCall(body, contractId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Initiates a recall (asynchronously)
     * Initiates a recall notice to return securities on a contract.  ### Validation rules:   - Caller must be the lender on the contract   - &#x60;contractId&#x60; -- must reference an &#x60;OPEN&#x60; contract   - &#x60;executionVenue&#x60;     - is mandatory     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;ONPLATFORM&#x60; then all other elements in &#x60;executionVenue&#x60; must be null     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;OFFPLATFORM&#x60; then &#x60;executionVenue.partyId&#x60;, &#x60;executionVenue.venueName&#x60;, and &#x60;executionVenue.partyRole&#x60; are mandatory   - &#x60;quantity&#x60;     - is mandatory     - must be &lt; 0     - must be &lt;&#x3D; contract open quantity - all existing open recall quantities   - &#x60;recallDate&#x60;     - is mandatory     - must be &gt;&#x3D; current day   - &#x60;recallDueDate&#x60;     - is mandatory     - must be &gt; &#x60;recallDate&#x60; 
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsPostAsync(RecallProposal body, String contractId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsPostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdRecallsRecallIdCancelPost
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdCancelPostCall(String contractId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/recalls/{recallId}/cancel"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdCancelPostValidateBeforeCall(String contractId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdRecallsRecallIdCancelPost(Async)");
        }
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerContractsContractIdRecallsRecallIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdCancelPostCall(contractId, recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdRecallsRecallIdCancelPost(String contractId, String recallId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdRecallsRecallIdCancelPostWithHttpInfo(contractId, recallId);
        return resp.getData();
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdRecallsRecallIdCancelPostWithHttpInfo(String contractId, String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdCancelPostValidateBeforeCall(contractId, recallId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdCancelPostAsync(String contractId, String recallId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdCancelPostValidateBeforeCall(contractId, recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdRecallsRecallIdGet
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdGetCall(String contractId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/recalls/{recallId}"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdGetValidateBeforeCall(String contractId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdRecallsRecallIdGet(Async)");
        }
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerContractsContractIdRecallsRecallIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdGetCall(contractId, recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a recall
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @return Recall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recall ledgerContractsContractIdRecallsRecallIdGet(String contractId, String recallId) throws ApiException {
        ApiResponse<Recall> resp = ledgerContractsContractIdRecallsRecallIdGetWithHttpInfo(contractId, recallId);
        return resp.getData();
    }

    /**
     * Read a recall
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;Recall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recall> ledgerContractsContractIdRecallsRecallIdGetWithHttpInfo(String contractId, String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdGetValidateBeforeCall(contractId, recallId, null, null);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a recall (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdGetAsync(String contractId, String recallId, final ApiCallback<Recall> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdGetValidateBeforeCall(contractId, recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdRecallsRecallIdVenuecancelPost
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdVenuecancelPostCall(String contractId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/recalls/{recallId}/venuecancel"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdVenuecancelPostValidateBeforeCall(String contractId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdRecallsRecallIdVenuecancelPost(Async)");
        }
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerContractsContractIdRecallsRecallIdVenuecancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdVenuecancelPostCall(contractId, recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerContractsContractIdRecallsRecallIdVenuecancelPost(String contractId, String recallId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerContractsContractIdRecallsRecallIdVenuecancelPostWithHttpInfo(contractId, recallId);
        return resp.getData();
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerContractsContractIdRecallsRecallIdVenuecancelPostWithHttpInfo(String contractId, String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdVenuecancelPostValidateBeforeCall(contractId, recallId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param contractId The unique identifier of a contract (required)
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdRecallsRecallIdVenuecancelPostAsync(String contractId, String recallId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdRecallsRecallIdVenuecancelPostValidateBeforeCall(contractId, recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerContractsContractIdVenuerecallsPost
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdVenuerecallsPostCall(RecallProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/contracts/{contractId}/venuerecalls"
            .replaceAll("\\{" + "contractId" + "\\}", apiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerContractsContractIdVenuerecallsPostValidateBeforeCall(RecallProposal body, String contractId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerContractsContractIdVenuerecallsPost(Async)");
        }
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling ledgerContractsContractIdVenuerecallsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuerecallsPostCall(body, contractId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * For delegated venues to create a recall atomically
     * 
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerContractsContractIdVenuerecallsPost(RecallProposal body, String contractId) throws ApiException {
        ledgerContractsContractIdVenuerecallsPostWithHttpInfo(body, contractId);
    }

    /**
     * For delegated venues to create a recall atomically
     * 
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerContractsContractIdVenuerecallsPostWithHttpInfo(RecallProposal body, String contractId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuerecallsPostValidateBeforeCall(body, contractId, null, null);
        return apiClient.execute(call);
    }

    /**
     * For delegated venues to create a recall atomically (asynchronously)
     * 
     * @param body New recall proposed against contract (required)
     * @param contractId The unique identifier of a contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerContractsContractIdVenuerecallsPostAsync(RecallProposal body, String contractId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerContractsContractIdVenuerecallsPostValidateBeforeCall(body, contractId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerRecallsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/recalls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerRecallsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerRecallsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of recalls
     * 
     * @return Recalls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recalls ledgerRecallsGet() throws ApiException {
        ApiResponse<Recalls> resp = ledgerRecallsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Read collection of recalls
     * 
     * @return ApiResponse&lt;Recalls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recalls> ledgerRecallsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = ledgerRecallsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of recalls (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsGetAsync(final ApiCallback<Recalls> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerRecallsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerRecallsRecallIdGet
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsRecallIdGetCall(String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/recalls/{recallId}"
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerRecallsRecallIdGetValidateBeforeCall(String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerRecallsRecallIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerRecallsRecallIdGetCall(recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a recall
     * 
     * @param recallId The unique identifier of a recall (required)
     * @return Recall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recall ledgerRecallsRecallIdGet(String recallId) throws ApiException {
        ApiResponse<Recall> resp = ledgerRecallsRecallIdGetWithHttpInfo(recallId);
        return resp.getData();
    }

    /**
     * Read a recall
     * 
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;Recall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recall> ledgerRecallsRecallIdGetWithHttpInfo(String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerRecallsRecallIdGetValidateBeforeCall(recallId, null, null);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a recall (asynchronously)
     * 
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsRecallIdGetAsync(String recallId, final ApiCallback<Recall> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerRecallsRecallIdGetValidateBeforeCall(recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
