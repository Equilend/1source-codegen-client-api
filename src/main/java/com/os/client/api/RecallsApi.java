/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.1
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;
import com.os.client.model.LedgerResponse;
import com.os.client.model.Recall;
import com.os.client.model.RecallAcknowledgement;
import com.os.client.model.RecallProposal;
import com.os.client.model.RecallStatus;
import com.os.client.model.Recalls;
import com.os.client.model.RecallsRecallIdBody;

public class RecallsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public RecallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecallsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for ledgerLoansLoanIdRecallsGet
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsGetCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/recalls"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdRecallsGetValidateBeforeCall(String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdRecallsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsGetCall(loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of recalls against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return Recalls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recalls ledgerLoansLoanIdRecallsGet(String loanId) throws ApiException {
        ApiResponse<Recalls> resp = ledgerLoansLoanIdRecallsGetWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * Read collection of recalls against loan specified by &#x27;loanId&#x27;
     * 
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;Recalls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recalls> ledgerLoansLoanIdRecallsGetWithHttpInfo(String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsGetValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of recalls against loan specified by &#x27;loanId&#x27; (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsGetAsync(String loanId, final ApiCallback<Recalls> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsGetValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdRecallsPost
     * @param body New recall proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsPostCall(RecallProposal body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/recalls"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdRecallsPostValidateBeforeCall(RecallProposal body, String loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdRecallsPost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdRecallsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsPostCall(body, loanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Initiates a recall
     * Initiates a recall notice to return securities on a loan.  ### Validation rules:   - Caller must be the lender on the loan   - &#x60;loanId&#x60; -- must reference an &#x60;OPEN&#x60; loan   - &#x60;executionVenue&#x60;     - is mandatory     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;ONPLATFORM&#x60; then all other elements in &#x60;executionVenue&#x60; must be null     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;OFFPLATFORM&#x60; then &#x60;executionVenue.partyId&#x60;, &#x60;executionVenue.venueName&#x60;, and &#x60;executionVenue.partyRole&#x60; are mandatory   - &#x60;quantity&#x60;     - is mandatory     - must be &lt; 0     - must be &lt;&#x3D; loan open quantity - all existing open recall quantities   - &#x60;recallDate&#x60;     - is mandatory     - must be &gt;&#x3D; current day   - &#x60;recallDueDate&#x60;     - is mandatory     - must be &gt; &#x60;recallDate&#x60; 
     * @param body New recall proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ledgerLoansLoanIdRecallsPost(RecallProposal body, String loanId) throws ApiException {
        ledgerLoansLoanIdRecallsPostWithHttpInfo(body, loanId);
    }

    /**
     * Initiates a recall
     * Initiates a recall notice to return securities on a loan.  ### Validation rules:   - Caller must be the lender on the loan   - &#x60;loanId&#x60; -- must reference an &#x60;OPEN&#x60; loan   - &#x60;executionVenue&#x60;     - is mandatory     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;ONPLATFORM&#x60; then all other elements in &#x60;executionVenue&#x60; must be null     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;OFFPLATFORM&#x60; then &#x60;executionVenue.partyId&#x60;, &#x60;executionVenue.venueName&#x60;, and &#x60;executionVenue.partyRole&#x60; are mandatory   - &#x60;quantity&#x60;     - is mandatory     - must be &lt; 0     - must be &lt;&#x3D; loan open quantity - all existing open recall quantities   - &#x60;recallDate&#x60;     - is mandatory     - must be &gt;&#x3D; current day   - &#x60;recallDueDate&#x60;     - is mandatory     - must be &gt; &#x60;recallDate&#x60; 
     * @param body New recall proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ledgerLoansLoanIdRecallsPostWithHttpInfo(RecallProposal body, String loanId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsPostValidateBeforeCall(body, loanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Initiates a recall (asynchronously)
     * Initiates a recall notice to return securities on a loan.  ### Validation rules:   - Caller must be the lender on the loan   - &#x60;loanId&#x60; -- must reference an &#x60;OPEN&#x60; loan   - &#x60;executionVenue&#x60;     - is mandatory     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;ONPLATFORM&#x60; then all other elements in &#x60;executionVenue&#x60; must be null     - if &#x60;executionVenue.type&#x60; &#x3D;&#x3D; &#x60;OFFPLATFORM&#x60; then &#x60;executionVenue.partyId&#x60;, &#x60;executionVenue.venueName&#x60;, and &#x60;executionVenue.partyRole&#x60; are mandatory   - &#x60;quantity&#x60;     - is mandatory     - must be &lt; 0     - must be &lt;&#x3D; loan open quantity - all existing open recall quantities   - &#x60;recallDate&#x60;     - is mandatory     - must be &gt;&#x3D; current day   - &#x60;recallDueDate&#x60;     - is mandatory     - must be &gt; &#x60;recallDate&#x60; 
     * @param body New recall proposed against loan (required)
     * @param loanId The unique identifier of a loan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsPostAsync(RecallProposal body, String loanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsPostValidateBeforeCall(body, loanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdRecallsRecallIdAcknowledgePost
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdAcknowledgePostCall(RecallAcknowledgement body, String loanId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/recalls/{recallId}/acknowledge"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdAcknowledgePostValidateBeforeCall(RecallAcknowledgement body, String loanId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ledgerLoansLoanIdRecallsRecallIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdRecallsRecallIdAcknowledgePost(Async)");
        }
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerLoansLoanIdRecallsRecallIdAcknowledgePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdAcknowledgePostCall(body, loanId, recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Acknowledge a pending recall. No change to status.
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdRecallsRecallIdAcknowledgePost(RecallAcknowledgement body, String loanId, String recallId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdRecallsRecallIdAcknowledgePostWithHttpInfo(body, loanId, recallId);
        return resp.getData();
    }

    /**
     * Acknowledge a pending recall. No change to status.
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdRecallsRecallIdAcknowledgePostWithHttpInfo(RecallAcknowledgement body, String loanId, String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdAcknowledgePostValidateBeforeCall(body, loanId, recallId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Acknowledge a pending recall. No change to status. (asynchronously)
     * 
     * @param body Acknowledge return with positive/negative intent (required)
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdAcknowledgePostAsync(RecallAcknowledgement body, String loanId, String recallId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdAcknowledgePostValidateBeforeCall(body, loanId, recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdRecallsRecallIdCancelPost
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdCancelPostCall(String loanId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/recalls/{recallId}/cancel"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdCancelPostValidateBeforeCall(String loanId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdRecallsRecallIdCancelPost(Async)");
        }
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerLoansLoanIdRecallsRecallIdCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdCancelPostCall(loanId, recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdRecallsRecallIdCancelPost(String loanId, String recallId) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdRecallsRecallIdCancelPostWithHttpInfo(loanId, recallId);
        return resp.getData();
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdRecallsRecallIdCancelPostWithHttpInfo(String loanId, String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdCancelPostValidateBeforeCall(loanId, recallId, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a recall in \&quot;proposed\&quot; state. Original proposer only. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdCancelPostAsync(String loanId, String recallId, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdCancelPostValidateBeforeCall(loanId, recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdRecallsRecallIdGet
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdGetCall(String loanId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/recalls/{recallId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdGetValidateBeforeCall(String loanId, String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdRecallsRecallIdGet(Async)");
        }
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerLoansLoanIdRecallsRecallIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdGetCall(loanId, recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a recall
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @return Recall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recall ledgerLoansLoanIdRecallsRecallIdGet(String loanId, String recallId) throws ApiException {
        ApiResponse<Recall> resp = ledgerLoansLoanIdRecallsRecallIdGetWithHttpInfo(loanId, recallId);
        return resp.getData();
    }

    /**
     * Read a recall
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;Recall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recall> ledgerLoansLoanIdRecallsRecallIdGetWithHttpInfo(String loanId, String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdGetValidateBeforeCall(loanId, recallId, null, null);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a recall (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdGetAsync(String loanId, String recallId, final ApiCallback<Recall> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdGetValidateBeforeCall(loanId, recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdRecallsRecallIdPatch
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdPatchCall(String loanId, String recallId, RecallsRecallIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/recalls/{recallId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdPatchValidateBeforeCall(String loanId, String recallId, RecallsRecallIdBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdRecallsRecallIdPatch(Async)");
        }
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerLoansLoanIdRecallsRecallIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdPatchCall(loanId, recallId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update unilateral fields on a recall
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param body  (optional)
     * @return LedgerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LedgerResponse ledgerLoansLoanIdRecallsRecallIdPatch(String loanId, String recallId, RecallsRecallIdBody body) throws ApiException {
        ApiResponse<LedgerResponse> resp = ledgerLoansLoanIdRecallsRecallIdPatchWithHttpInfo(loanId, recallId, body);
        return resp.getData();
    }

    /**
     * Update unilateral fields on a recall
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param body  (optional)
     * @return ApiResponse&lt;LedgerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LedgerResponse> ledgerLoansLoanIdRecallsRecallIdPatchWithHttpInfo(String loanId, String recallId, RecallsRecallIdBody body) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdPatchValidateBeforeCall(loanId, recallId, body, null, null);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update unilateral fields on a recall (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param recallId The unique identifier of a recall (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdRecallsRecallIdPatchAsync(String loanId, String recallId, RecallsRecallIdBody body, final ApiCallback<LedgerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdRecallsRecallIdPatchValidateBeforeCall(loanId, recallId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LedgerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerRecallsGet
     * @param since Recalls updated (since) timestamp UTC (optional)
     * @param before Recalls updated (before) timestamp UTC (optional)
     * @param size Number of recalls to be returned. Can be used to facilitate paging (optional)
     * @param recallStatus Recalls matching status RECALL STATUS (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsGetCall(OffsetDateTime since, OffsetDateTime before, Integer size, RecallStatus recallStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/recalls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (recallStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recallStatus", recallStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerRecallsGetValidateBeforeCall(OffsetDateTime since, OffsetDateTime before, Integer size, RecallStatus recallStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerRecallsGetCall(since, before, size, recallStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of recalls
     * 
     * @param since Recalls updated (since) timestamp UTC (optional)
     * @param before Recalls updated (before) timestamp UTC (optional)
     * @param size Number of recalls to be returned. Can be used to facilitate paging (optional)
     * @param recallStatus Recalls matching status RECALL STATUS (optional)
     * @return Recalls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recalls ledgerRecallsGet(OffsetDateTime since, OffsetDateTime before, Integer size, RecallStatus recallStatus) throws ApiException {
        ApiResponse<Recalls> resp = ledgerRecallsGetWithHttpInfo(since, before, size, recallStatus);
        return resp.getData();
    }

    /**
     * Read collection of recalls
     * 
     * @param since Recalls updated (since) timestamp UTC (optional)
     * @param before Recalls updated (before) timestamp UTC (optional)
     * @param size Number of recalls to be returned. Can be used to facilitate paging (optional)
     * @param recallStatus Recalls matching status RECALL STATUS (optional)
     * @return ApiResponse&lt;Recalls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recalls> ledgerRecallsGetWithHttpInfo(OffsetDateTime since, OffsetDateTime before, Integer size, RecallStatus recallStatus) throws ApiException {
        com.squareup.okhttp.Call call = ledgerRecallsGetValidateBeforeCall(since, before, size, recallStatus, null, null);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of recalls (asynchronously)
     * 
     * @param since Recalls updated (since) timestamp UTC (optional)
     * @param before Recalls updated (before) timestamp UTC (optional)
     * @param size Number of recalls to be returned. Can be used to facilitate paging (optional)
     * @param recallStatus Recalls matching status RECALL STATUS (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsGetAsync(OffsetDateTime since, OffsetDateTime before, Integer size, RecallStatus recallStatus, final ApiCallback<Recalls> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerRecallsGetValidateBeforeCall(since, before, size, recallStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recalls>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerRecallsRecallIdGet
     * @param recallId The unique identifier of a recall (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsRecallIdGetCall(String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/recalls/{recallId}"
            .replaceAll("\\{" + "recallId" + "\\}", apiClient.escapeString(recallId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerRecallsRecallIdGetValidateBeforeCall(String recallId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'recallId' is set
        if (recallId == null) {
            throw new ApiException("Missing the required parameter 'recallId' when calling ledgerRecallsRecallIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerRecallsRecallIdGetCall(recallId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a recall
     * 
     * @param recallId The unique identifier of a recall (required)
     * @return Recall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recall ledgerRecallsRecallIdGet(String recallId) throws ApiException {
        ApiResponse<Recall> resp = ledgerRecallsRecallIdGetWithHttpInfo(recallId);
        return resp.getData();
    }

    /**
     * Read a recall
     * 
     * @param recallId The unique identifier of a recall (required)
     * @return ApiResponse&lt;Recall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recall> ledgerRecallsRecallIdGetWithHttpInfo(String recallId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerRecallsRecallIdGetValidateBeforeCall(recallId, null, null);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a recall (asynchronously)
     * 
     * @param recallId The unique identifier of a recall (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerRecallsRecallIdGetAsync(String recallId, final ApiCallback<Recall> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerRecallsRecallIdGetValidateBeforeCall(recallId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recall>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
