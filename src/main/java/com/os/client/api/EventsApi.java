/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.1
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.os.client.invoker.ApiCallback;
import com.os.client.invoker.ApiClient;
import com.os.client.invoker.ApiException;
import com.os.client.invoker.ApiResponse;
import com.os.client.invoker.Configuration;
import com.os.client.invoker.Pair;
import com.os.client.invoker.ProgressRequestBody;
import com.os.client.invoker.ProgressResponseBody;
import com.os.client.model.Event;
import com.os.client.model.EventType;
import com.os.client.model.Events;
import com.os.client.model.SortOrder;

public class EventsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for ledgerEventsEventIdGet
     * @param eventId The unique identifier of an event (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerEventsEventIdGetCall(Long eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/events/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerEventsEventIdGetValidateBeforeCall(Long eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling ledgerEventsEventIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerEventsEventIdGetCall(eventId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an event
     * 
     * @param eventId The unique identifier of an event (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event ledgerEventsEventIdGet(Long eventId) throws ApiException {
        ApiResponse<Event> resp = ledgerEventsEventIdGetWithHttpInfo(eventId);
        return resp.getData();
    }

    /**
     * Read an event
     * 
     * @param eventId The unique identifier of an event (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> ledgerEventsEventIdGetWithHttpInfo(Long eventId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerEventsEventIdGetValidateBeforeCall(eventId, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an event (asynchronously)
     * 
     * @param eventId The unique identifier of an event (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerEventsEventIdGetAsync(Long eventId, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerEventsEventIdGetValidateBeforeCall(eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerEventsGet
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging. Defaults to 100 (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerEventsGetCall(List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (beforeEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("beforeEventId", beforeEventId));
        if (fromEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromEventId", fromEventId));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerEventsGetValidateBeforeCall(List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ledgerEventsGetCall(eventType, beforeEventId, fromEventId, since, before, size, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of events. With no parameters returns events since start of current day.
     * 
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging. Defaults to 100 (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @return Events
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Events ledgerEventsGet(List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder) throws ApiException {
        ApiResponse<Events> resp = ledgerEventsGetWithHttpInfo(eventType, beforeEventId, fromEventId, since, before, size, sortOrder);
        return resp.getData();
    }

    /**
     * Read collection of events. With no parameters returns events since start of current day.
     * 
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging. Defaults to 100 (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @return ApiResponse&lt;Events&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Events> ledgerEventsGetWithHttpInfo(List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = ledgerEventsGetValidateBeforeCall(eventType, beforeEventId, fromEventId, since, before, size, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of events. With no parameters returns events since start of current day. (asynchronously)
     * 
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging. Defaults to 100 (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerEventsGetAsync(List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder, final ApiCallback<Events> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerEventsGetValidateBeforeCall(eventType, beforeEventId, fromEventId, since, before, size, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdEventsEventIdGet
     * @param loanId The unique identifier of a loan (required)
     * @param eventId The unique identifier of an Event (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdEventsEventIdGetCall(String loanId, Long eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/events/{eventId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdEventsEventIdGetValidateBeforeCall(String loanId, Long eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdEventsEventIdGet(Async)");
        }
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling ledgerLoansLoanIdEventsEventIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdEventsEventIdGetCall(loanId, eventId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read an event
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param eventId The unique identifier of an Event (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event ledgerLoansLoanIdEventsEventIdGet(String loanId, Long eventId) throws ApiException {
        ApiResponse<Event> resp = ledgerLoansLoanIdEventsEventIdGetWithHttpInfo(loanId, eventId);
        return resp.getData();
    }

    /**
     * Read an event
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param eventId The unique identifier of an Event (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> ledgerLoansLoanIdEventsEventIdGetWithHttpInfo(String loanId, Long eventId) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdEventsEventIdGetValidateBeforeCall(loanId, eventId, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read an event (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param eventId The unique identifier of an Event (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdEventsEventIdGetAsync(String loanId, Long eventId, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdEventsEventIdGetValidateBeforeCall(loanId, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ledgerLoansLoanIdEventsGet
     * @param loanId The unique identifier of a loan (required)
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdEventsGetCall(String loanId, List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ledger/loans/{loanId}/events"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eventType", eventType));
        if (beforeEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("beforeEventId", beforeEventId));
        if (fromEventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromEventId", fromEventId));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "stage_auth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ledgerLoansLoanIdEventsGetValidateBeforeCall(String loanId, List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling ledgerLoansLoanIdEventsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ledgerLoansLoanIdEventsGetCall(loanId, eventType, beforeEventId, fromEventId, since, before, size, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read collection of events against a specific loan. With no parameters returns events since start of current day.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @return Events
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Events ledgerLoansLoanIdEventsGet(String loanId, List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder) throws ApiException {
        ApiResponse<Events> resp = ledgerLoansLoanIdEventsGetWithHttpInfo(loanId, eventType, beforeEventId, fromEventId, since, before, size, sortOrder);
        return resp.getData();
    }

    /**
     * Read collection of events against a specific loan. With no parameters returns events since start of current day.
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @return ApiResponse&lt;Events&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Events> ledgerLoansLoanIdEventsGetWithHttpInfo(String loanId, List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = ledgerLoansLoanIdEventsGetValidateBeforeCall(loanId, eventType, beforeEventId, fromEventId, since, before, size, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read collection of events against a specific loan. With no parameters returns events since start of current day. (asynchronously)
     * 
     * @param loanId The unique identifier of a loan (required)
     * @param eventType Filter by event type (optional)
     * @param beforeEventId  (optional)
     * @param fromEventId  (optional)
     * @param since Events (since) timestamp UTC (optional)
     * @param before Events (before) timestamp UTC (optional)
     * @param size Number of events to be returned. Can be used to facilitate paging (optional)
     * @param sortOrder Sort events by order of creation ascending or descending. Defaults to ASCENDING (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ledgerLoansLoanIdEventsGetAsync(String loanId, List<EventType> eventType, Long beforeEventId, Long fromEventId, OffsetDateTime since, OffsetDateTime before, Integer size, SortOrder sortOrder, final ApiCallback<Events> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ledgerLoansLoanIdEventsGetValidateBeforeCall(loanId, eventType, beforeEventId, fromEventId, since, before, size, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
