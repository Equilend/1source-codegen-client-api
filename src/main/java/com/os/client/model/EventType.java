/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way. 
 *
 * OpenAPI spec version: 1.2.1
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.os.client.model;

import java.io.IOException;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Event Types:  * &#x60;AUTO_RERATE_APPLIED&#x60; - A loan with a floating rebate tied to a benchmark has been updated after a benchmark move. &#x60;rate.rebate.floating.[baseRate,effectiveRate]&#x60; have been recalculated.  * &#x60;BUYIN_COMPLETED&#x60; - &#x60;buyin.buyinCompleteId&#x60; has been accepted by the counterparty. The status is now &#x60;COMPLETED&#x60;. &#x60;loan.trade.openQuantity&#x60; was updated to reflect the buy-in.  * &#x60;BUYIN_PENDING&#x60; - The lending party has bought-in the counterparty on &#x60;loan.loanId&#x60; for &#x60;buyin.quantity&#x60; at &#x60;buyin.price&#x60;.  * &#x60;DELEGATION_APPROVED&#x60; - &#x60;delegation.delegationId&#x60; was approved by the proposing party. The status is now &#x60;APPROVED&#x60;.  * &#x60;DELEGATION_CANCELED&#x60; - &#x60;delegation.delegationId&#x60; was canceled by the proposing party. The status is now &#x60;CANCELED&#x60;.  * &#x60;DELEGATION_PROPOSED&#x60; - A party is proposing to counterparty &#x60;delegation.counterparty&#x60; that &#x60;delegation.authorization&#x60; be granted to &#x60;delegation.delegationParty&#x60;. This allows &#x60;delegation.delegationParty&#x60; to exercise life cycle events on behalf of the counterparties.  * &#x60;DELEGATION_DECLINED&#x60; - &#x60;delegation.delegationId&#x60; was declined by the counterparty. The status is now &#x60;DECLINED&#x60;.   * &#x60;INTERNAL_REFID_UPDATE&#x60; - &#x60;loan.trade.transactingParties[].internalReference&#x60; was updated by one of the parties.  * &#x60;LOAN_PROPOSED&#x60; - A new loan was proposed on the ledger identified as &#x60;loanId&#x60;.  * &#x60;LOAN_PENDING&#x60; - &#x60;loan.loanId&#x60; was approved by the counterparty and is now &#x60;PENDING&#x60;.  * &#x60;LOAN_CANCELED&#x60; - &#x60;loan.loanId&#x60; was canceled by the proposing party. &#x60;loan.loanStatusReason&#x60; has more information.  * &#x60;LOAN_CANCEL_PENDING&#x60; - A &#x60;PENDING&#x60; loan is requested to be canceled before being settled. Both parties must submit the request. The initiator can provide &#x60;loan.loanStatusReason&#x60;.  * &#x60;LOAN_CLOSED&#x60; - An &#x60;OPEN&#x60; loan has been fully returned. &#x60;loan.trade.openQuantity&#x60; is 0. &#x60;loan.loanStatus&#x60; is now &#x60;CLOSED&#x60;.  * &#x60;LOAN_DECLINED&#x60; - A loan proposal was declined by the counterparty. &#x60;loan.loanStatusReason&#x60; has more information.  * &#x60;LOAN_MARKTOMARKET&#x60; - An &#x60;OPEN&#x60; loan was marked-to-market. The &#x60;loan.trade.instrument.price.value&#x60; was updated. &#x60;loan.trade.collateral.[contractPrice, contractValue, collateralValue]&#x60; were updated based on the new price.  * &#x60;LOAN_OPENED&#x60; - A loan was marked as &#x60;SETTLED&#x60; by both counterparties and now has status &#x60;OPEN&#x60;.  * &#x60;LOAN_SPLIT_PROPOSED&#x60; - A party to &#x60;OPEN&#x60; loan &#x60;loan.loanId&#x60; has proposed to split the loan. The loan split is identified as &#x60;loanSplitId&#x60;.  * &#x60;LOAN_SPLIT_APPLIED&#x60; - A proposed split of &#x60;loan.loanId&#x60; was applied. &#x60;LOAN_OPENED&#x60; events will publish for the fractional loans.  * &#x60;RECALL_ACKNOWLEDGED&#x60; - An &#x60;OPEN&#x60; recall on &#x60;recall.loanId&#x60; has been positively or negatively acknowledged by the counterparty. &#x60;recall.acknowledgementType&#x60; has been updated to &#x60;POSITIVE&#x60; or &#x60;NEGATIVE&#x60; and &#x60;recall.description&#x60; has more information on the reason.  * &#x60;RECALL_CANCELED&#x60; - An &#x60;OPEN&#x60; recall was canceled by the opening party. &#x60;recall.status&#x60; is now &#x60;CANCELED&#x60;.  * &#x60;RECALL_CLOSED&#x60; - An &#x60;OPEN&#x60; recall was closed after being fully satisifed by a return. &#x60;recall.status&#x60; is now &#x60;CLOSED&#x60;.  * &#x60;RECALL_MODIFIED&#x60; - The &#x60;recall.quantity&#x60; was updated on an &#x60;OPEN&#x60; recall against &#x60;recall.loanId&#x60;.  * &#x60;RECALL_OPENED&#x60; - A recall was opened against &#x60;recall.loanId&#x60; for &#x60;recall.quantity&#x60;. &#x60;recall.status&#x60; is &#x60;OPEN&#x60;.  * &#x60;RECALL_UPDATED&#x60; - The &#x60;recall.openQuantity&#x60; was changed after a settled return was applied to &#x60;recall.loanId&#x60;.  * &#x60;RERATE_APPLIED&#x60; - A &#x60;PENDING&#x60; rerate against &#x60;rerate.loanId&#x60; was applied. &#x60;loan.trade.rate&#x60; was updated.  * &#x60;RERATE_CANCELED&#x60; - A &#x60;PROPOSED&#x60; rerate was canceled by the proposing party.  * &#x60;RERATE_CANCEL_PENDING&#x60; - A &#x60;PENDING&#x60; rerate is requested to be canceled before being applied. Both parties must submit the request. The initiator can provide &#x60;rerate.statusReason&#x60;.  * &#x60;RERATE_DECLINED&#x60; - The counterparty has declined a rerate proposal. Reason found in &#x60;rerate.statusReason&#x60;.  * &#x60;RERATE_PENDING&#x60; - A &#x60;PROPOSED&#x60; rerate has been approved by the counterparty. It will be applied based on &#x60;rerate.rerate.{rate}.effectiveDate&#x60;.  * &#x60;RERATE_PROPOSED&#x60; - A rerate has been proposed against &#x60;rerate.loanId&#x60;. Existing rate is &#x60;rerate.rate&#x60; and proposed rerate is &#x60;rerate.rerate&#x60;.  * &#x60;RETURN_ACKNOWLEDGED&#x60; - A &#x60;PENDING&#x60; return on &#x60;return.loanId&#x60; has been positively or negatively acknowledged by the counterparty. &#x60;return.acknowledgementType&#x60; has been updated to &#x60;POSITIVE&#x60; or &#x60;NEGATIVE&#x60; and &#x60;return.description&#x60; has more information on the reason.  * &#x60;RETURN_CANCELED&#x60; - A &#x60;PENDING&#x60; return on &#x60;return.loanId&#x60; has been canceled. &#x60;return.status&#x60; is now &#x60;CANCELED&#x60;.  * &#x60;RETURN_PENDING&#x60; - A return is &#x60;PENDING&#x60; on &#x60;return.loanId&#x60;  * &#x60;RETURN_SETTLED&#x60; - A &#x60;PENDING&#x60; return has been settled. &#x60;return.status&#x60; is now &#x60;SETTLED&#x60;. The &#x60;loan.trade.openQuantity&#x60; of loan referenced by &#x60;return.loanId&#x60; has been updated.  * &#x60;RETURN_SETTLEMENT_STATUS_UPDATE&#x60; - The settlement status of a return was updated by one of the transacting parties. &#x60;return.settlement[].settlementStatus&#x60;.  * &#x60;SETTLEMENT_INSTRUCTION_UPDATE&#x60; - Settlement instructions on a loan were updated by one of the transacting parties. &#x60;loan.settlement[].instruction&#x60;.  * &#x60;SETTLEMENT_STATUS_UPDATE&#x60; - The settlement status of a loan was updated by one of the transacting parties. &#x60;loan.settlement[].settlementStatus&#x60;.  * &#x60;TRADE_AGREED&#x60; - A trade agreement was created by a delegated venue.  * &#x60;VENUE_REFERENCE_UPDATE&#x60; - A delegated venue has updated &#x60;loan.trade.venues[].venueRefKey&#x60;. 
 */
@JsonAdapter(EventType.Adapter.class)
public enum EventType {
  @SerializedName("AUTO_RERATE_APPLIED")
  AUTO_RERATE_APPLIED("AUTO_RERATE_APPLIED"),
  @SerializedName("BUYIN_COMPLETED")
  BUYIN_COMPLETED("BUYIN_COMPLETED"),
  @SerializedName("BUYIN_PENDING")
  BUYIN_PENDING("BUYIN_PENDING"),
  @SerializedName("DELEGATION_APPROVED")
  DELEGATION_APPROVED("DELEGATION_APPROVED"),
  @SerializedName("DELEGATION_CANCELED")
  DELEGATION_CANCELED("DELEGATION_CANCELED"),
  @SerializedName("DELEGATION_PROPOSED")
  DELEGATION_PROPOSED("DELEGATION_PROPOSED"),
  @SerializedName("DELEGATION_DECLINED")
  DELEGATION_DECLINED("DELEGATION_DECLINED"),
  @SerializedName("INTERNAL_REFID_UPDATE")
  INTERNAL_REFID_UPDATE("INTERNAL_REFID_UPDATE"),
  @SerializedName("LOAN_PROPOSED")
  LOAN_PROPOSED("LOAN_PROPOSED"),
  @SerializedName("LOAN_PENDING")
  LOAN_PENDING("LOAN_PENDING"),
  @SerializedName("LOAN_CANCELED")
  LOAN_CANCELED("LOAN_CANCELED"),
  @SerializedName("LOAN_CANCEL_PENDING")
  LOAN_CANCEL_PENDING("LOAN_CANCEL_PENDING"),
  @SerializedName("LOAN_CLOSED")
  LOAN_CLOSED("LOAN_CLOSED"),
  @SerializedName("LOAN_DECLINED")
  LOAN_DECLINED("LOAN_DECLINED"),
  @SerializedName("LOAN_MARKTOMARKET")
  LOAN_MARKTOMARKET("LOAN_MARKTOMARKET"),
  @SerializedName("LOAN_OPENED")
  LOAN_OPENED("LOAN_OPENED"),
  @SerializedName("LOAN_SPLIT_PROPOSED")
  LOAN_SPLIT_PROPOSED("LOAN_SPLIT_PROPOSED"),
  @SerializedName("LOAN_SPLIT_APPLIED")
  LOAN_SPLIT_APPLIED("LOAN_SPLIT_APPLIED"),
  @SerializedName("RECALL_ACKNOWLEDGED")
  RECALL_ACKNOWLEDGED("RECALL_ACKNOWLEDGED"),
  @SerializedName("RECALL_CANCELED")
  RECALL_CANCELED("RECALL_CANCELED"),
  @SerializedName("RECALL_CLOSED")
  RECALL_CLOSED("RECALL_CLOSED"),
  @SerializedName("RECALL_MODIFIED")
  RECALL_MODIFIED("RECALL_MODIFIED"),
  @SerializedName("RECALL_OPENED")
  RECALL_OPENED("RECALL_OPENED"),
  @SerializedName("RECALL_UPDATED")
  RECALL_UPDATED("RECALL_UPDATED"),
  @SerializedName("RERATE_APPLIED")
  RERATE_APPLIED("RERATE_APPLIED"),
  @SerializedName("RERATE_CANCELED")
  RERATE_CANCELED("RERATE_CANCELED"),
  @SerializedName("RERATE_CANCEL_PENDING")
  RERATE_CANCEL_PENDING("RERATE_CANCEL_PENDING"),
  @SerializedName("RERATE_DECLINED")
  RERATE_DECLINED("RERATE_DECLINED"),
  @SerializedName("RERATE_PENDING")
  RERATE_PENDING("RERATE_PENDING"),
  @SerializedName("RERATE_PROPOSED")
  RERATE_PROPOSED("RERATE_PROPOSED"),
  @SerializedName("RETURN_ACKNOWLEDGED")
  RETURN_ACKNOWLEDGED("RETURN_ACKNOWLEDGED"),
  @SerializedName("RETURN_CANCELED")
  RETURN_CANCELED("RETURN_CANCELED"),
  @SerializedName("RETURN_PENDING")
  RETURN_PENDING("RETURN_PENDING"),
  @SerializedName("RETURN_SETTLED")
  RETURN_SETTLED("RETURN_SETTLED"),
  @SerializedName("RETURN_SETTLEMENT_STATUS_UPDATE")
  RETURN_SETTLEMENT_STATUS_UPDATE("RETURN_SETTLEMENT_STATUS_UPDATE"),
  @SerializedName("SETTLEMENT_INSTRUCTION_UPDATE")
  SETTLEMENT_INSTRUCTION_UPDATE("SETTLEMENT_INSTRUCTION_UPDATE"),
  @SerializedName("SETTLEMENT_STATUS_UPDATE")
  SETTLEMENT_STATUS_UPDATE("SETTLEMENT_STATUS_UPDATE"),
  @SerializedName("TRADE_AGREED")
  TRADE_AGREED("TRADE_AGREED"),
  @SerializedName("TRADE_CANCELED")
  TRADE_CANCELED("TRADE_CANCELED"),
  @SerializedName("VENUE_REFERENCE_UPDATE")
  VENUE_REFERENCE_UPDATE("VENUE_REFERENCE_UPDATE");

  private String value;

  EventType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EventType fromValue(String input) {
    for (EventType b : EventType.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<EventType> {
    @Override
    public void write(final JsonWriter jsonWriter, final EventType enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public EventType read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return EventType.fromValue((String)(value));
    }
  }
}
